# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class AntennaHubState(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'port_number': 'int',
        'port_status': 'str',
        'serial_number': 'str'
    }

    attribute_map = {
        'port_number': 'portNumber',
        'port_status': 'portStatus',
        'serial_number': 'serialNumber'
    }

    def __init__(self, port_number=None, port_status=None, serial_number=None, _configuration=None):  # noqa: E501
        """AntennaHubState - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._port_number = None
        self._port_status = None
        self._serial_number = None
        self.discriminator = None

        self.port_number = port_number
        self.port_status = port_status
        if serial_number is not None:
            self.serial_number = serial_number

    @property
    def port_number(self):
        """Gets the port_number of this AntennaHubState.  # noqa: E501


        :return: The port_number of this AntennaHubState.  # noqa: E501
        :rtype: int
        """
        return self._port_number

    @port_number.setter
    def port_number(self, port_number):
        """Sets the port_number of this AntennaHubState.


        :param port_number: The port_number of this AntennaHubState.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and port_number is None:
            raise ValueError("Invalid value for `port_number`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port_number is not None and port_number < 1):  # noqa: E501
            raise ValueError("Invalid value for `port_number`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port_number = port_number

    @property
    def port_status(self):
        """Gets the port_status of this AntennaHubState.  # noqa: E501

        Connection status of the antenna port. Status is \"unknown\" when antenna-hub is enabled pending reboot.   # noqa: E501

        :return: The port_status of this AntennaHubState.  # noqa: E501
        :rtype: str
        """
        return self._port_status

    @port_status.setter
    def port_status(self, port_status):
        """Sets the port_status of this AntennaHubState.

        Connection status of the antenna port. Status is \"unknown\" when antenna-hub is enabled pending reboot.   # noqa: E501

        :param port_status: The port_status of this AntennaHubState.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and port_status is None:
            raise ValueError("Invalid value for `port_status`, must not be `None`")  # noqa: E501
        allowed_values = ["disconnected", "connected", "unknown"]  # noqa: E501
        if (self._configuration.client_side_validation and
                port_status not in allowed_values):
            raise ValueError(
                "Invalid value for `port_status` ({0}), must be one of {1}"  # noqa: E501
                .format(port_status, allowed_values)
            )

        self._port_status = port_status

    @property
    def serial_number(self):
        """Gets the serial_number of this AntennaHubState.  # noqa: E501


        :return: The serial_number of this AntennaHubState.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this AntennaHubState.


        :param serial_number: The serial_number of this AntennaHubState.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                serial_number is not None and len(serial_number) > 16):
            raise ValueError("Invalid value for `serial_number`, length must be less than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                serial_number is not None and len(serial_number) < 16):
            raise ValueError("Invalid value for `serial_number`, length must be greater than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                serial_number is not None and not re.search(r'^[a-fA-F0-9]+$', serial_number)):  # noqa: E501
            raise ValueError(r"Invalid value for `serial_number`, must be a follow pattern or equal to `/^[a-fA-F0-9]+$/`")  # noqa: E501

        self._serial_number = serial_number

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AntennaHubState, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AntennaHubState):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, AntennaHubState):
            return True

        return self.to_dict() != other.to_dict()
