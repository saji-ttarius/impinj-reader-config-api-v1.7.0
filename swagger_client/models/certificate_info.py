# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CertificateInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cert_id': 'CertificateId',
        'issuer': 'str',
        'subject': 'str',
        'not_before': 'datetime',
        'not_after': 'datetime',
        'intended_purposes': 'list[ExtendedKeyUsage]'
    }

    attribute_map = {
        'cert_id': 'certId',
        'issuer': 'issuer',
        'subject': 'subject',
        'not_before': 'notBefore',
        'not_after': 'notAfter',
        'intended_purposes': 'intendedPurposes'
    }

    def __init__(self, cert_id=None, issuer=None, subject=None, not_before=None, not_after=None, intended_purposes=None, _configuration=None):  # noqa: E501
        """CertificateInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._cert_id = None
        self._issuer = None
        self._subject = None
        self._not_before = None
        self._not_after = None
        self._intended_purposes = None
        self.discriminator = None

        if cert_id is not None:
            self.cert_id = cert_id
        if issuer is not None:
            self.issuer = issuer
        if subject is not None:
            self.subject = subject
        if not_before is not None:
            self.not_before = not_before
        if not_after is not None:
            self.not_after = not_after
        if intended_purposes is not None:
            self.intended_purposes = intended_purposes

    @property
    def cert_id(self):
        """Gets the cert_id of this CertificateInfo.  # noqa: E501


        :return: The cert_id of this CertificateInfo.  # noqa: E501
        :rtype: CertificateId
        """
        return self._cert_id

    @cert_id.setter
    def cert_id(self, cert_id):
        """Sets the cert_id of this CertificateInfo.


        :param cert_id: The cert_id of this CertificateInfo.  # noqa: E501
        :type: CertificateId
        """

        self._cert_id = cert_id

    @property
    def issuer(self):
        """Gets the issuer of this CertificateInfo.  # noqa: E501

        Identifies the CA that has signed and issued the certificate.  # noqa: E501

        :return: The issuer of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._issuer

    @issuer.setter
    def issuer(self, issuer):
        """Sets the issuer of this CertificateInfo.

        Identifies the CA that has signed and issued the certificate.  # noqa: E501

        :param issuer: The issuer of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                issuer is not None and len(issuer) > 256):
            raise ValueError("Invalid value for `issuer`, length must be less than or equal to `256`")  # noqa: E501

        self._issuer = issuer

    @property
    def subject(self):
        """Gets the subject of this CertificateInfo.  # noqa: E501

        Identifies the entity associated with the public key on the certificate.  # noqa: E501

        :return: The subject of this CertificateInfo.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CertificateInfo.

        Identifies the entity associated with the public key on the certificate.  # noqa: E501

        :param subject: The subject of this CertificateInfo.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                subject is not None and len(subject) > 256):
            raise ValueError("Invalid value for `subject`, length must be less than or equal to `256`")  # noqa: E501

        self._subject = subject

    @property
    def not_before(self):
        """Gets the not_before of this CertificateInfo.  # noqa: E501

        The starting date in which the certificate is considered valid.  # noqa: E501

        :return: The not_before of this CertificateInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._not_before

    @not_before.setter
    def not_before(self, not_before):
        """Sets the not_before of this CertificateInfo.

        The starting date in which the certificate is considered valid.  # noqa: E501

        :param not_before: The not_before of this CertificateInfo.  # noqa: E501
        :type: datetime
        """

        self._not_before = not_before

    @property
    def not_after(self):
        """Gets the not_after of this CertificateInfo.  # noqa: E501

        The ending date in which the certificate is considered valid.  # noqa: E501

        :return: The not_after of this CertificateInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._not_after

    @not_after.setter
    def not_after(self, not_after):
        """Sets the not_after of this CertificateInfo.

        The ending date in which the certificate is considered valid.  # noqa: E501

        :param not_after: The not_after of this CertificateInfo.  # noqa: E501
        :type: datetime
        """

        self._not_after = not_after

    @property
    def intended_purposes(self):
        """Gets the intended_purposes of this CertificateInfo.  # noqa: E501


        :return: The intended_purposes of this CertificateInfo.  # noqa: E501
        :rtype: list[ExtendedKeyUsage]
        """
        return self._intended_purposes

    @intended_purposes.setter
    def intended_purposes(self, intended_purposes):
        """Sets the intended_purposes of this CertificateInfo.


        :param intended_purposes: The intended_purposes of this CertificateInfo.  # noqa: E501
        :type: list[ExtendedKeyUsage]
        """

        self._intended_purposes = intended_purposes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CertificateInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CertificateInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CertificateInfo):
            return True

        return self.to_dict() != other.to_dict()
