# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class CsrConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'subject': 'CsrConfigurationSubject',
        'subject_alt_names': 'list[str]',
        'key_type': 'str'
    }

    attribute_map = {
        'subject': 'subject',
        'subject_alt_names': 'subjectAltNames',
        'key_type': 'keyType'
    }

    def __init__(self, subject=None, subject_alt_names=None, key_type=None, _configuration=None):  # noqa: E501
        """CsrConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._subject = None
        self._subject_alt_names = None
        self._key_type = None
        self.discriminator = None

        self.subject = subject
        if subject_alt_names is not None:
            self.subject_alt_names = subject_alt_names
        if key_type is not None:
            self.key_type = key_type

    @property
    def subject(self):
        """Gets the subject of this CsrConfiguration.  # noqa: E501


        :return: The subject of this CsrConfiguration.  # noqa: E501
        :rtype: CsrConfigurationSubject
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this CsrConfiguration.


        :param subject: The subject of this CsrConfiguration.  # noqa: E501
        :type: CsrConfigurationSubject
        """
        if self._configuration.client_side_validation and subject is None:
            raise ValueError("Invalid value for `subject`, must not be `None`")  # noqa: E501

        self._subject = subject

    @property
    def subject_alt_names(self):
        """Gets the subject_alt_names of this CsrConfiguration.  # noqa: E501

        A list of subject alternative names to be included in the certificate. These should typically has both bare domain and wildcard domain names. For example: `example.com` and `*.example.com`.   # noqa: E501

        :return: The subject_alt_names of this CsrConfiguration.  # noqa: E501
        :rtype: list[str]
        """
        return self._subject_alt_names

    @subject_alt_names.setter
    def subject_alt_names(self, subject_alt_names):
        """Sets the subject_alt_names of this CsrConfiguration.

        A list of subject alternative names to be included in the certificate. These should typically has both bare domain and wildcard domain names. For example: `example.com` and `*.example.com`.   # noqa: E501

        :param subject_alt_names: The subject_alt_names of this CsrConfiguration.  # noqa: E501
        :type: list[str]
        """

        self._subject_alt_names = subject_alt_names

    @property
    def key_type(self):
        """Gets the key_type of this CsrConfiguration.  # noqa: E501

        The certificate's private key algorithm and key size.  # noqa: E501

        :return: The key_type of this CsrConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._key_type

    @key_type.setter
    def key_type(self, key_type):
        """Sets the key_type of this CsrConfiguration.

        The certificate's private key algorithm and key size.  # noqa: E501

        :param key_type: The key_type of this CsrConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["rsa-2048", "rsa-4096", "ecdsa-256", "ecdsa-384"]  # noqa: E501
        if (self._configuration.client_side_validation and
                key_type not in allowed_values):
            raise ValueError(
                "Invalid value for `key_type` ({0}), must be one of {1}"  # noqa: E501
                .format(key_type, allowed_values)
            )

        self._key_type = key_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CsrConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CsrConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CsrConfiguration):
            return True

        return self.to_dict() != other.to_dict()
