# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class EventWebhookConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'server_configuration': 'WebhookServerConfiguration',
        'retry': 'WebhookRetryConfiguration',
        'event_batch_limit': 'int',
        'event_batch_linger_milliseconds': 'int',
        'event_buffer_size': 'int'
    }

    attribute_map = {
        'active': 'active',
        'server_configuration': 'serverConfiguration',
        'retry': 'retry',
        'event_batch_limit': 'eventBatchLimit',
        'event_batch_linger_milliseconds': 'eventBatchLingerMilliseconds',
        'event_buffer_size': 'eventBufferSize'
    }

    def __init__(self, active=False, server_configuration=None, retry=None, event_batch_limit=None, event_batch_linger_milliseconds=None, event_buffer_size=None, _configuration=None):  # noqa: E501
        """EventWebhookConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._server_configuration = None
        self._retry = None
        self._event_batch_limit = None
        self._event_batch_linger_milliseconds = None
        self._event_buffer_size = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if server_configuration is not None:
            self.server_configuration = server_configuration
        if retry is not None:
            self.retry = retry
        if event_batch_limit is not None:
            self.event_batch_limit = event_batch_limit
        if event_batch_linger_milliseconds is not None:
            self.event_batch_linger_milliseconds = event_batch_linger_milliseconds
        if event_buffer_size is not None:
            self.event_buffer_size = event_buffer_size

    @property
    def active(self):
        """Gets the active of this EventWebhookConfiguration.  # noqa: E501

        Used to enable or disable webhook publishing.  # noqa: E501

        :return: The active of this EventWebhookConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this EventWebhookConfiguration.

        Used to enable or disable webhook publishing.  # noqa: E501

        :param active: The active of this EventWebhookConfiguration.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def server_configuration(self):
        """Gets the server_configuration of this EventWebhookConfiguration.  # noqa: E501


        :return: The server_configuration of this EventWebhookConfiguration.  # noqa: E501
        :rtype: WebhookServerConfiguration
        """
        return self._server_configuration

    @server_configuration.setter
    def server_configuration(self, server_configuration):
        """Sets the server_configuration of this EventWebhookConfiguration.


        :param server_configuration: The server_configuration of this EventWebhookConfiguration.  # noqa: E501
        :type: WebhookServerConfiguration
        """

        self._server_configuration = server_configuration

    @property
    def retry(self):
        """Gets the retry of this EventWebhookConfiguration.  # noqa: E501


        :return: The retry of this EventWebhookConfiguration.  # noqa: E501
        :rtype: WebhookRetryConfiguration
        """
        return self._retry

    @retry.setter
    def retry(self, retry):
        """Sets the retry of this EventWebhookConfiguration.


        :param retry: The retry of this EventWebhookConfiguration.  # noqa: E501
        :type: WebhookRetryConfiguration
        """

        self._retry = retry

    @property
    def event_batch_limit(self):
        """Gets the event_batch_limit of this EventWebhookConfiguration.  # noqa: E501

        The max number of events sent in a batch.   # noqa: E501

        :return: The event_batch_limit of this EventWebhookConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._event_batch_limit

    @event_batch_limit.setter
    def event_batch_limit(self, event_batch_limit):
        """Sets the event_batch_limit of this EventWebhookConfiguration.

        The max number of events sent in a batch.   # noqa: E501

        :param event_batch_limit: The event_batch_limit of this EventWebhookConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                event_batch_limit is not None and event_batch_limit > 300000):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_limit`, must be a value less than or equal to `300000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_batch_limit is not None and event_batch_limit < 1):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._event_batch_limit = event_batch_limit

    @property
    def event_batch_linger_milliseconds(self):
        """Gets the event_batch_linger_milliseconds of this EventWebhookConfiguration.  # noqa: E501

        The next batch will be sent when the linger time has elapsed since the last batch was sent successfully. If no events have queued for delivery when the linger time elapses, an empty batch will be sent.   # noqa: E501

        :return: The event_batch_linger_milliseconds of this EventWebhookConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._event_batch_linger_milliseconds

    @event_batch_linger_milliseconds.setter
    def event_batch_linger_milliseconds(self, event_batch_linger_milliseconds):
        """Sets the event_batch_linger_milliseconds of this EventWebhookConfiguration.

        The next batch will be sent when the linger time has elapsed since the last batch was sent successfully. If no events have queued for delivery when the linger time elapses, an empty batch will be sent.   # noqa: E501

        :param event_batch_linger_milliseconds: The event_batch_linger_milliseconds of this EventWebhookConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                event_batch_linger_milliseconds is not None and event_batch_linger_milliseconds > 900000):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_linger_milliseconds`, must be a value less than or equal to `900000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_batch_linger_milliseconds is not None and event_batch_linger_milliseconds < 1):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_linger_milliseconds`, must be a value greater than or equal to `1`")  # noqa: E501

        self._event_batch_linger_milliseconds = event_batch_linger_milliseconds

    @property
    def event_buffer_size(self):
        """Gets the event_buffer_size of this EventWebhookConfiguration.  # noqa: E501

        The minimum number of events that will be queued on the reader waiting for delivery. When the queue exceeds this size, events will periodically be purged and an \"OverflowEvent\" will be inserted into the queue in place of the purged events.   # noqa: E501

        :return: The event_buffer_size of this EventWebhookConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._event_buffer_size

    @event_buffer_size.setter
    def event_buffer_size(self, event_buffer_size):
        """Sets the event_buffer_size of this EventWebhookConfiguration.

        The minimum number of events that will be queued on the reader waiting for delivery. When the queue exceeds this size, events will periodically be purged and an \"OverflowEvent\" will be inserted into the queue in place of the purged events.   # noqa: E501

        :param event_buffer_size: The event_buffer_size of this EventWebhookConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                event_buffer_size is not None and event_buffer_size > 300000):  # noqa: E501
            raise ValueError("Invalid value for `event_buffer_size`, must be a value less than or equal to `300000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_buffer_size is not None and event_buffer_size < 1000):  # noqa: E501
            raise ValueError("Invalid value for `event_buffer_size`, must be a value greater than or equal to `1000`")  # noqa: E501

        self._event_buffer_size = event_buffer_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EventWebhookConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EventWebhookConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EventWebhookConfiguration):
            return True

        return self.to_dict() != other.to_dict()
