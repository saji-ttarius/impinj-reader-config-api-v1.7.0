# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InventoryAntennaConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'antenna_name': 'AntennaName',
        'antenna_port': 'AntennaPort',
        'transmit_power_cdbm': 'TransmitPowerCdbm',
        'rf_mode': 'RfMode',
        'inventory_session': 'InventorySession',
        'inventory_search_mode': 'InventorySearchMode',
        'estimated_tag_population': 'int',
        'filtering': 'InventoryFilterConfiguration',
        'power_sweeping': 'TransmitPowerSweepConfiguration',
        'fast_id': 'FastId',
        'protected_mode_pin_hex': 'str',
        'receive_sensitivity_dbm': 'int',
        'tag_authentication': 'TagAuthentication',
        'tag_memory_reads': 'list[TagMemoryRead]',
        'tag_access_password_hex': 'str',
        'tag_access_password_write_hex': 'str',
        'tag_security_modes_write': 'TagSecurityModes'
    }

    attribute_map = {
        'antenna_name': 'antennaName',
        'antenna_port': 'antennaPort',
        'transmit_power_cdbm': 'transmitPowerCdbm',
        'rf_mode': 'rfMode',
        'inventory_session': 'inventorySession',
        'inventory_search_mode': 'inventorySearchMode',
        'estimated_tag_population': 'estimatedTagPopulation',
        'filtering': 'filtering',
        'power_sweeping': 'powerSweeping',
        'fast_id': 'fastId',
        'protected_mode_pin_hex': 'protectedModePinHex',
        'receive_sensitivity_dbm': 'receiveSensitivityDbm',
        'tag_authentication': 'tagAuthentication',
        'tag_memory_reads': 'tagMemoryReads',
        'tag_access_password_hex': 'tagAccessPasswordHex',
        'tag_access_password_write_hex': 'tagAccessPasswordWriteHex',
        'tag_security_modes_write': 'tagSecurityModesWrite'
    }

    def __init__(self, antenna_name=None, antenna_port=None, transmit_power_cdbm=None, rf_mode=None, inventory_session=None, inventory_search_mode=None, estimated_tag_population=None, filtering=None, power_sweeping=None, fast_id=None, protected_mode_pin_hex=None, receive_sensitivity_dbm=None, tag_authentication=None, tag_memory_reads=None, tag_access_password_hex=None, tag_access_password_write_hex=None, tag_security_modes_write=None, _configuration=None):  # noqa: E501
        """InventoryAntennaConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._antenna_name = None
        self._antenna_port = None
        self._transmit_power_cdbm = None
        self._rf_mode = None
        self._inventory_session = None
        self._inventory_search_mode = None
        self._estimated_tag_population = None
        self._filtering = None
        self._power_sweeping = None
        self._fast_id = None
        self._protected_mode_pin_hex = None
        self._receive_sensitivity_dbm = None
        self._tag_authentication = None
        self._tag_memory_reads = None
        self._tag_access_password_hex = None
        self._tag_access_password_write_hex = None
        self._tag_security_modes_write = None
        self.discriminator = None

        if antenna_name is not None:
            self.antenna_name = antenna_name
        self.antenna_port = antenna_port
        self.transmit_power_cdbm = transmit_power_cdbm
        self.rf_mode = rf_mode
        self.inventory_session = inventory_session
        self.inventory_search_mode = inventory_search_mode
        self.estimated_tag_population = estimated_tag_population
        if filtering is not None:
            self.filtering = filtering
        if power_sweeping is not None:
            self.power_sweeping = power_sweeping
        if fast_id is not None:
            self.fast_id = fast_id
        if protected_mode_pin_hex is not None:
            self.protected_mode_pin_hex = protected_mode_pin_hex
        if receive_sensitivity_dbm is not None:
            self.receive_sensitivity_dbm = receive_sensitivity_dbm
        if tag_authentication is not None:
            self.tag_authentication = tag_authentication
        if tag_memory_reads is not None:
            self.tag_memory_reads = tag_memory_reads
        if tag_access_password_hex is not None:
            self.tag_access_password_hex = tag_access_password_hex
        if tag_access_password_write_hex is not None:
            self.tag_access_password_write_hex = tag_access_password_write_hex
        if tag_security_modes_write is not None:
            self.tag_security_modes_write = tag_security_modes_write

    @property
    def antenna_name(self):
        """Gets the antenna_name of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The antenna_name of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: AntennaName
        """
        return self._antenna_name

    @antenna_name.setter
    def antenna_name(self, antenna_name):
        """Sets the antenna_name of this InventoryAntennaConfiguration.


        :param antenna_name: The antenna_name of this InventoryAntennaConfiguration.  # noqa: E501
        :type: AntennaName
        """

        self._antenna_name = antenna_name

    @property
    def antenna_port(self):
        """Gets the antenna_port of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The antenna_port of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: AntennaPort
        """
        return self._antenna_port

    @antenna_port.setter
    def antenna_port(self, antenna_port):
        """Sets the antenna_port of this InventoryAntennaConfiguration.


        :param antenna_port: The antenna_port of this InventoryAntennaConfiguration.  # noqa: E501
        :type: AntennaPort
        """
        if self._configuration.client_side_validation and antenna_port is None:
            raise ValueError("Invalid value for `antenna_port`, must not be `None`")  # noqa: E501

        self._antenna_port = antenna_port

    @property
    def transmit_power_cdbm(self):
        """Gets the transmit_power_cdbm of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The transmit_power_cdbm of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: TransmitPowerCdbm
        """
        return self._transmit_power_cdbm

    @transmit_power_cdbm.setter
    def transmit_power_cdbm(self, transmit_power_cdbm):
        """Sets the transmit_power_cdbm of this InventoryAntennaConfiguration.


        :param transmit_power_cdbm: The transmit_power_cdbm of this InventoryAntennaConfiguration.  # noqa: E501
        :type: TransmitPowerCdbm
        """
        if self._configuration.client_side_validation and transmit_power_cdbm is None:
            raise ValueError("Invalid value for `transmit_power_cdbm`, must not be `None`")  # noqa: E501

        self._transmit_power_cdbm = transmit_power_cdbm

    @property
    def rf_mode(self):
        """Gets the rf_mode of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The rf_mode of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: RfMode
        """
        return self._rf_mode

    @rf_mode.setter
    def rf_mode(self, rf_mode):
        """Sets the rf_mode of this InventoryAntennaConfiguration.


        :param rf_mode: The rf_mode of this InventoryAntennaConfiguration.  # noqa: E501
        :type: RfMode
        """
        if self._configuration.client_side_validation and rf_mode is None:
            raise ValueError("Invalid value for `rf_mode`, must not be `None`")  # noqa: E501

        self._rf_mode = rf_mode

    @property
    def inventory_session(self):
        """Gets the inventory_session of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The inventory_session of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: InventorySession
        """
        return self._inventory_session

    @inventory_session.setter
    def inventory_session(self, inventory_session):
        """Sets the inventory_session of this InventoryAntennaConfiguration.


        :param inventory_session: The inventory_session of this InventoryAntennaConfiguration.  # noqa: E501
        :type: InventorySession
        """
        if self._configuration.client_side_validation and inventory_session is None:
            raise ValueError("Invalid value for `inventory_session`, must not be `None`")  # noqa: E501

        self._inventory_session = inventory_session

    @property
    def inventory_search_mode(self):
        """Gets the inventory_search_mode of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The inventory_search_mode of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: InventorySearchMode
        """
        return self._inventory_search_mode

    @inventory_search_mode.setter
    def inventory_search_mode(self, inventory_search_mode):
        """Sets the inventory_search_mode of this InventoryAntennaConfiguration.


        :param inventory_search_mode: The inventory_search_mode of this InventoryAntennaConfiguration.  # noqa: E501
        :type: InventorySearchMode
        """
        if self._configuration.client_side_validation and inventory_search_mode is None:
            raise ValueError("Invalid value for `inventory_search_mode`, must not be `None`")  # noqa: E501

        self._inventory_search_mode = inventory_search_mode

    @property
    def estimated_tag_population(self):
        """Gets the estimated_tag_population of this InventoryAntennaConfiguration.  # noqa: E501

        The estimated number of tags in the antenna's field of view.  # noqa: E501

        :return: The estimated_tag_population of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._estimated_tag_population

    @estimated_tag_population.setter
    def estimated_tag_population(self, estimated_tag_population):
        """Sets the estimated_tag_population of this InventoryAntennaConfiguration.

        The estimated number of tags in the antenna's field of view.  # noqa: E501

        :param estimated_tag_population: The estimated_tag_population of this InventoryAntennaConfiguration.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and estimated_tag_population is None:
            raise ValueError("Invalid value for `estimated_tag_population`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                estimated_tag_population is not None and estimated_tag_population > 32768):  # noqa: E501
            raise ValueError("Invalid value for `estimated_tag_population`, must be a value less than or equal to `32768`")  # noqa: E501
        if (self._configuration.client_side_validation and
                estimated_tag_population is not None and estimated_tag_population < 1):  # noqa: E501
            raise ValueError("Invalid value for `estimated_tag_population`, must be a value greater than or equal to `1`")  # noqa: E501

        self._estimated_tag_population = estimated_tag_population

    @property
    def filtering(self):
        """Gets the filtering of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The filtering of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: InventoryFilterConfiguration
        """
        return self._filtering

    @filtering.setter
    def filtering(self, filtering):
        """Sets the filtering of this InventoryAntennaConfiguration.


        :param filtering: The filtering of this InventoryAntennaConfiguration.  # noqa: E501
        :type: InventoryFilterConfiguration
        """

        self._filtering = filtering

    @property
    def power_sweeping(self):
        """Gets the power_sweeping of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The power_sweeping of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: TransmitPowerSweepConfiguration
        """
        return self._power_sweeping

    @power_sweeping.setter
    def power_sweeping(self, power_sweeping):
        """Sets the power_sweeping of this InventoryAntennaConfiguration.


        :param power_sweeping: The power_sweeping of this InventoryAntennaConfiguration.  # noqa: E501
        :type: TransmitPowerSweepConfiguration
        """

        self._power_sweeping = power_sweeping

    @property
    def fast_id(self):
        """Gets the fast_id of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The fast_id of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: FastId
        """
        return self._fast_id

    @fast_id.setter
    def fast_id(self, fast_id):
        """Sets the fast_id of this InventoryAntennaConfiguration.


        :param fast_id: The fast_id of this InventoryAntennaConfiguration.  # noqa: E501
        :type: FastId
        """

        self._fast_id = fast_id

    @property
    def protected_mode_pin_hex(self):
        """Gets the protected_mode_pin_hex of this InventoryAntennaConfiguration.  # noqa: E501

        The PIN used to inventory tags in protected mode. By default, only tags with the specified PIN will respond. If the \"filtering\" property is provided, default behavior will be overridden and tags will respond according to the provided filters regardless of their protected state.  Note: Unprotected tags may also respond if they have the value of the PIN stored in their user memory.  Note: Active filter verification is incompatible with inventory of tags in Protected Mode.   # noqa: E501

        :return: The protected_mode_pin_hex of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._protected_mode_pin_hex

    @protected_mode_pin_hex.setter
    def protected_mode_pin_hex(self, protected_mode_pin_hex):
        """Sets the protected_mode_pin_hex of this InventoryAntennaConfiguration.

        The PIN used to inventory tags in protected mode. By default, only tags with the specified PIN will respond. If the \"filtering\" property is provided, default behavior will be overridden and tags will respond according to the provided filters regardless of their protected state.  Note: Unprotected tags may also respond if they have the value of the PIN stored in their user memory.  Note: Active filter verification is incompatible with inventory of tags in Protected Mode.   # noqa: E501

        :param protected_mode_pin_hex: The protected_mode_pin_hex of this InventoryAntennaConfiguration.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                protected_mode_pin_hex is not None and len(protected_mode_pin_hex) > 8):
            raise ValueError("Invalid value for `protected_mode_pin_hex`, length must be less than or equal to `8`")  # noqa: E501
        if (self._configuration.client_side_validation and
                protected_mode_pin_hex is not None and len(protected_mode_pin_hex) < 8):
            raise ValueError("Invalid value for `protected_mode_pin_hex`, length must be greater than or equal to `8`")  # noqa: E501
        if (self._configuration.client_side_validation and
                protected_mode_pin_hex is not None and not re.search(r'^[0-9a-fA-F]*$', protected_mode_pin_hex)):  # noqa: E501
            raise ValueError(r"Invalid value for `protected_mode_pin_hex`, must be a follow pattern or equal to `/^[0-9a-fA-F]*$/`")  # noqa: E501

        self._protected_mode_pin_hex = protected_mode_pin_hex

    @property
    def receive_sensitivity_dbm(self):
        """Gets the receive_sensitivity_dbm of this InventoryAntennaConfiguration.  # noqa: E501

        The receive sensitivity in dBm. This setting will limit the reported tags to those with an RSSI greater than this value. To have the reader report tags at its greatest sensitivity do not specify this parameter.   # noqa: E501

        :return: The receive_sensitivity_dbm of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._receive_sensitivity_dbm

    @receive_sensitivity_dbm.setter
    def receive_sensitivity_dbm(self, receive_sensitivity_dbm):
        """Sets the receive_sensitivity_dbm of this InventoryAntennaConfiguration.

        The receive sensitivity in dBm. This setting will limit the reported tags to those with an RSSI greater than this value. To have the reader report tags at its greatest sensitivity do not specify this parameter.   # noqa: E501

        :param receive_sensitivity_dbm: The receive_sensitivity_dbm of this InventoryAntennaConfiguration.  # noqa: E501
        :type: int
        """

        self._receive_sensitivity_dbm = receive_sensitivity_dbm

    @property
    def tag_authentication(self):
        """Gets the tag_authentication of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The tag_authentication of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: TagAuthentication
        """
        return self._tag_authentication

    @tag_authentication.setter
    def tag_authentication(self, tag_authentication):
        """Sets the tag_authentication of this InventoryAntennaConfiguration.


        :param tag_authentication: The tag_authentication of this InventoryAntennaConfiguration.  # noqa: E501
        :type: TagAuthentication
        """

        self._tag_authentication = tag_authentication

    @property
    def tag_memory_reads(self):
        """Gets the tag_memory_reads of this InventoryAntennaConfiguration.  # noqa: E501

        When specified, the reader will perform additional access operations and return additional data from the tag, at the cost of slower tag throughput.   # noqa: E501

        :return: The tag_memory_reads of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: list[TagMemoryRead]
        """
        return self._tag_memory_reads

    @tag_memory_reads.setter
    def tag_memory_reads(self, tag_memory_reads):
        """Sets the tag_memory_reads of this InventoryAntennaConfiguration.

        When specified, the reader will perform additional access operations and return additional data from the tag, at the cost of slower tag throughput.   # noqa: E501

        :param tag_memory_reads: The tag_memory_reads of this InventoryAntennaConfiguration.  # noqa: E501
        :type: list[TagMemoryRead]
        """

        self._tag_memory_reads = tag_memory_reads

    @property
    def tag_access_password_hex(self):
        """Gets the tag_access_password_hex of this InventoryAntennaConfiguration.  # noqa: E501

        The tag access password to use when executing access commands that require a password to complete.  If not specified, the value of `protectedModePinHex` will be used.   # noqa: E501

        :return: The tag_access_password_hex of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tag_access_password_hex

    @tag_access_password_hex.setter
    def tag_access_password_hex(self, tag_access_password_hex):
        """Sets the tag_access_password_hex of this InventoryAntennaConfiguration.

        The tag access password to use when executing access commands that require a password to complete.  If not specified, the value of `protectedModePinHex` will be used.   # noqa: E501

        :param tag_access_password_hex: The tag_access_password_hex of this InventoryAntennaConfiguration.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                tag_access_password_hex is not None and len(tag_access_password_hex) > 8):
            raise ValueError("Invalid value for `tag_access_password_hex`, length must be less than or equal to `8`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_access_password_hex is not None and len(tag_access_password_hex) < 8):
            raise ValueError("Invalid value for `tag_access_password_hex`, length must be greater than or equal to `8`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_access_password_hex is not None and not re.search(r'^[0-9a-fA-F]*$', tag_access_password_hex)):  # noqa: E501
            raise ValueError(r"Invalid value for `tag_access_password_hex`, must be a follow pattern or equal to `/^[0-9a-fA-F]*$/`")  # noqa: E501

        self._tag_access_password_hex = tag_access_password_hex

    @property
    def tag_access_password_write_hex(self):
        """Gets the tag_access_password_write_hex of this InventoryAntennaConfiguration.  # noqa: E501

        When specified, the reader will write the access password to all inventoried tags.  The status of this operation will be reported in a TagInventoryEvent.   # noqa: E501

        :return: The tag_access_password_write_hex of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tag_access_password_write_hex

    @tag_access_password_write_hex.setter
    def tag_access_password_write_hex(self, tag_access_password_write_hex):
        """Sets the tag_access_password_write_hex of this InventoryAntennaConfiguration.

        When specified, the reader will write the access password to all inventoried tags.  The status of this operation will be reported in a TagInventoryEvent.   # noqa: E501

        :param tag_access_password_write_hex: The tag_access_password_write_hex of this InventoryAntennaConfiguration.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                tag_access_password_write_hex is not None and len(tag_access_password_write_hex) > 8):
            raise ValueError("Invalid value for `tag_access_password_write_hex`, length must be less than or equal to `8`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_access_password_write_hex is not None and len(tag_access_password_write_hex) < 8):
            raise ValueError("Invalid value for `tag_access_password_write_hex`, length must be greater than or equal to `8`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_access_password_write_hex is not None and not re.search(r'^[0-9a-fA-F]*$', tag_access_password_write_hex)):  # noqa: E501
            raise ValueError(r"Invalid value for `tag_access_password_write_hex`, must be a follow pattern or equal to `/^[0-9a-fA-F]*$/`")  # noqa: E501

        self._tag_access_password_write_hex = tag_access_password_write_hex

    @property
    def tag_security_modes_write(self):
        """Gets the tag_security_modes_write of this InventoryAntennaConfiguration.  # noqa: E501


        :return: The tag_security_modes_write of this InventoryAntennaConfiguration.  # noqa: E501
        :rtype: TagSecurityModes
        """
        return self._tag_security_modes_write

    @tag_security_modes_write.setter
    def tag_security_modes_write(self, tag_security_modes_write):
        """Sets the tag_security_modes_write of this InventoryAntennaConfiguration.


        :param tag_security_modes_write: The tag_security_modes_write of this InventoryAntennaConfiguration.  # noqa: E501
        :type: TagSecurityModes
        """

        self._tag_security_modes_write = tag_security_modes_write

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryAntennaConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryAntennaConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryAntennaConfiguration):
            return True

        return self.to_dict() != other.to_dict()
