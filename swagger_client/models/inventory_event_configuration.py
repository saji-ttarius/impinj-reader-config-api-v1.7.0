# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InventoryEventConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common': 'CommonEventConfiguration',
        'tag_inventory': 'TagInventoryEventConfiguration',
        'antenna_activation_event_delivery': 'str'
    }

    attribute_map = {
        'common': 'common',
        'tag_inventory': 'tagInventory',
        'antenna_activation_event_delivery': 'antennaActivationEventDelivery'
    }

    def __init__(self, common=None, tag_inventory=None, antenna_activation_event_delivery='disabled', _configuration=None):  # noqa: E501
        """InventoryEventConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._common = None
        self._tag_inventory = None
        self._antenna_activation_event_delivery = None
        self.discriminator = None

        if common is not None:
            self.common = common
        if tag_inventory is not None:
            self.tag_inventory = tag_inventory
        if antenna_activation_event_delivery is not None:
            self.antenna_activation_event_delivery = antenna_activation_event_delivery

    @property
    def common(self):
        """Gets the common of this InventoryEventConfiguration.  # noqa: E501


        :return: The common of this InventoryEventConfiguration.  # noqa: E501
        :rtype: CommonEventConfiguration
        """
        return self._common

    @common.setter
    def common(self, common):
        """Sets the common of this InventoryEventConfiguration.


        :param common: The common of this InventoryEventConfiguration.  # noqa: E501
        :type: CommonEventConfiguration
        """

        self._common = common

    @property
    def tag_inventory(self):
        """Gets the tag_inventory of this InventoryEventConfiguration.  # noqa: E501


        :return: The tag_inventory of this InventoryEventConfiguration.  # noqa: E501
        :rtype: TagInventoryEventConfiguration
        """
        return self._tag_inventory

    @tag_inventory.setter
    def tag_inventory(self, tag_inventory):
        """Sets the tag_inventory of this InventoryEventConfiguration.


        :param tag_inventory: The tag_inventory of this InventoryEventConfiguration.  # noqa: E501
        :type: TagInventoryEventConfiguration
        """

        self._tag_inventory = tag_inventory

    @property
    def antenna_activation_event_delivery(self):
        """Gets the antenna_activation_event_delivery of this InventoryEventConfiguration.  # noqa: E501

        Enable or disable delivery of the antennaActivationEvent  # noqa: E501

        :return: The antenna_activation_event_delivery of this InventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._antenna_activation_event_delivery

    @antenna_activation_event_delivery.setter
    def antenna_activation_event_delivery(self, antenna_activation_event_delivery):
        """Sets the antenna_activation_event_delivery of this InventoryEventConfiguration.

        Enable or disable delivery of the antennaActivationEvent  # noqa: E501

        :param antenna_activation_event_delivery: The antenna_activation_event_delivery of this InventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                antenna_activation_event_delivery not in allowed_values):
            raise ValueError(
                "Invalid value for `antenna_activation_event_delivery` ({0}), must be one of {1}"  # noqa: E501
                .format(antenna_activation_event_delivery, allowed_values)
            )

        self._antenna_activation_event_delivery = antenna_activation_event_delivery

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryEventConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryEventConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryEventConfiguration):
            return True

        return self.to_dict() != other.to_dict()
