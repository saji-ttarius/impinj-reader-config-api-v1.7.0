# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class InventoryFilterConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'filters': 'Filters',
        'filter_link': 'FilterLink',
        'filter_verification': 'FilterVerification'
    }

    attribute_map = {
        'filters': 'filters',
        'filter_link': 'filterLink',
        'filter_verification': 'filterVerification'
    }

    def __init__(self, filters=None, filter_link=None, filter_verification=None, _configuration=None):  # noqa: E501
        """InventoryFilterConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._filters = None
        self._filter_link = None
        self._filter_verification = None
        self.discriminator = None

        self.filters = filters
        if filter_link is not None:
            self.filter_link = filter_link
        if filter_verification is not None:
            self.filter_verification = filter_verification

    @property
    def filters(self):
        """Gets the filters of this InventoryFilterConfiguration.  # noqa: E501


        :return: The filters of this InventoryFilterConfiguration.  # noqa: E501
        :rtype: Filters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this InventoryFilterConfiguration.


        :param filters: The filters of this InventoryFilterConfiguration.  # noqa: E501
        :type: Filters
        """
        if self._configuration.client_side_validation and filters is None:
            raise ValueError("Invalid value for `filters`, must not be `None`")  # noqa: E501

        self._filters = filters

    @property
    def filter_link(self):
        """Gets the filter_link of this InventoryFilterConfiguration.  # noqa: E501


        :return: The filter_link of this InventoryFilterConfiguration.  # noqa: E501
        :rtype: FilterLink
        """
        return self._filter_link

    @filter_link.setter
    def filter_link(self, filter_link):
        """Sets the filter_link of this InventoryFilterConfiguration.


        :param filter_link: The filter_link of this InventoryFilterConfiguration.  # noqa: E501
        :type: FilterLink
        """

        self._filter_link = filter_link

    @property
    def filter_verification(self):
        """Gets the filter_verification of this InventoryFilterConfiguration.  # noqa: E501


        :return: The filter_verification of this InventoryFilterConfiguration.  # noqa: E501
        :rtype: FilterVerification
        """
        return self._filter_verification

    @filter_verification.setter
    def filter_verification(self, filter_verification):
        """Sets the filter_verification of this InventoryFilterConfiguration.


        :param filter_verification: The filter_verification of this InventoryFilterConfiguration.  # noqa: E501
        :type: FilterVerification
        """

        self._filter_verification = filter_verification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InventoryFilterConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InventoryFilterConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InventoryFilterConfiguration):
            return True

        return self.to_dict() != other.to_dict()
