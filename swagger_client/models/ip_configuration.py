# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class IpConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address_mode': 'str',
        'static_address': 'str',
        'static_prefix': 'int',
        'static_gateway': 'str'
    }

    attribute_map = {
        'address_mode': 'addressMode',
        'static_address': 'staticAddress',
        'static_prefix': 'staticPrefix',
        'static_gateway': 'staticGateway'
    }

    def __init__(self, address_mode=None, static_address=None, static_prefix=None, static_gateway=None, _configuration=None):  # noqa: E501
        """IpConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._address_mode = None
        self._static_address = None
        self._static_prefix = None
        self._static_gateway = None
        self.discriminator = None

        self.address_mode = address_mode
        if static_address is not None:
            self.static_address = static_address
        if static_prefix is not None:
            self.static_prefix = static_prefix
        if static_gateway is not None:
            self.static_gateway = static_gateway

    @property
    def address_mode(self):
        """Gets the address_mode of this IpConfiguration.  # noqa: E501

        The addressing mode used for this interface. If the `addressMode` is set to `dynamic`, the optional `staticAddress`, `staticPrefix`, and `staticGateway` provided with the request will be saved on the reader, but not used.  When the `addressMode` is set to `static`, the values for `staticAddress`, `staticPrefix`, and `staticGateway` will be used for the network interface configuration. If the values for those fields are not provided with the request, the previously set values will be used. If no values are found for 'staticAddress' and `staticPrefix`, an error response will be returned. If no value for 'staticGateway' is found, the reader's gateway will not be configured and the reader can only be accessed within the local network.   # noqa: E501

        :return: The address_mode of this IpConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._address_mode

    @address_mode.setter
    def address_mode(self, address_mode):
        """Sets the address_mode of this IpConfiguration.

        The addressing mode used for this interface. If the `addressMode` is set to `dynamic`, the optional `staticAddress`, `staticPrefix`, and `staticGateway` provided with the request will be saved on the reader, but not used.  When the `addressMode` is set to `static`, the values for `staticAddress`, `staticPrefix`, and `staticGateway` will be used for the network interface configuration. If the values for those fields are not provided with the request, the previously set values will be used. If no values are found for 'staticAddress' and `staticPrefix`, an error response will be returned. If no value for 'staticGateway' is found, the reader's gateway will not be configured and the reader can only be accessed within the local network.   # noqa: E501

        :param address_mode: The address_mode of this IpConfiguration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address_mode is None:
            raise ValueError("Invalid value for `address_mode`, must not be `None`")  # noqa: E501
        allowed_values = ["dynamic", "static"]  # noqa: E501
        if (self._configuration.client_side_validation and
                address_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `address_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(address_mode, allowed_values)
            )

        self._address_mode = address_mode

    @property
    def static_address(self):
        """Gets the static_address of this IpConfiguration.  # noqa: E501

        The IP address to use when addressMode is set to `static`. Could be either an IPv4 address in dot-decimal format or an IPv6 address compliant with RFC-5952.   # noqa: E501

        :return: The static_address of this IpConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._static_address

    @static_address.setter
    def static_address(self, static_address):
        """Sets the static_address of this IpConfiguration.

        The IP address to use when addressMode is set to `static`. Could be either an IPv4 address in dot-decimal format or an IPv6 address compliant with RFC-5952.   # noqa: E501

        :param static_address: The static_address of this IpConfiguration.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                static_address is not None and len(static_address) > 64):
            raise ValueError("Invalid value for `static_address`, length must be less than or equal to `64`")  # noqa: E501

        self._static_address = static_address

    @property
    def static_prefix(self):
        """Gets the static_prefix of this IpConfiguration.  # noqa: E501

        The network prefix length to use when addressMode is set to `static`. A typical value is 24 for IPv4 and 64 for IPv6.   # noqa: E501

        :return: The static_prefix of this IpConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._static_prefix

    @static_prefix.setter
    def static_prefix(self, static_prefix):
        """Sets the static_prefix of this IpConfiguration.

        The network prefix length to use when addressMode is set to `static`. A typical value is 24 for IPv4 and 64 for IPv6.   # noqa: E501

        :param static_prefix: The static_prefix of this IpConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                static_prefix is not None and static_prefix > 128):  # noqa: E501
            raise ValueError("Invalid value for `static_prefix`, must be a value less than or equal to `128`")  # noqa: E501
        if (self._configuration.client_side_validation and
                static_prefix is not None and static_prefix < 8):  # noqa: E501
            raise ValueError("Invalid value for `static_prefix`, must be a value greater than or equal to `8`")  # noqa: E501

        self._static_prefix = static_prefix

    @property
    def static_gateway(self):
        """Gets the static_gateway of this IpConfiguration.  # noqa: E501

        The gateway to use when the `addressMode` is set to `static`. Could be either an IPv4 address in dot-decimal format or an IPv6 address compliant with RFC-5952.   # noqa: E501

        :return: The static_gateway of this IpConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._static_gateway

    @static_gateway.setter
    def static_gateway(self, static_gateway):
        """Sets the static_gateway of this IpConfiguration.

        The gateway to use when the `addressMode` is set to `static`. Could be either an IPv4 address in dot-decimal format or an IPv6 address compliant with RFC-5952.   # noqa: E501

        :param static_gateway: The static_gateway of this IpConfiguration.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                static_gateway is not None and len(static_gateway) > 64):
            raise ValueError("Invalid value for `static_gateway`, length must be less than or equal to `64`")  # noqa: E501

        self._static_gateway = static_gateway

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IpConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IpConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IpConfiguration):
            return True

        return self.to_dict() != other.to_dict()
