# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class KafkaConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'bootstraps': 'list[KafkaBootstrapServerConfiguration]',
        'client_id': 'str',
        'event_topic': 'str',
        'partition_key': 'str',
        'event_batch_limit': 'int',
        'event_batch_linger_milliseconds': 'int'
    }

    attribute_map = {
        'active': 'active',
        'bootstraps': 'bootstraps',
        'client_id': 'clientId',
        'event_topic': 'eventTopic',
        'partition_key': 'partitionKey',
        'event_batch_limit': 'eventBatchLimit',
        'event_batch_linger_milliseconds': 'eventBatchLingerMilliseconds'
    }

    def __init__(self, active=False, bootstraps=None, client_id=None, event_topic=None, partition_key='', event_batch_limit=None, event_batch_linger_milliseconds=None, _configuration=None):  # noqa: E501
        """KafkaConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active = None
        self._bootstraps = None
        self._client_id = None
        self._event_topic = None
        self._partition_key = None
        self._event_batch_limit = None
        self._event_batch_linger_milliseconds = None
        self.discriminator = None

        if active is not None:
            self.active = active
        self.bootstraps = bootstraps
        self.client_id = client_id
        self.event_topic = event_topic
        if partition_key is not None:
            self.partition_key = partition_key
        if event_batch_limit is not None:
            self.event_batch_limit = event_batch_limit
        if event_batch_linger_milliseconds is not None:
            self.event_batch_linger_milliseconds = event_batch_linger_milliseconds

    @property
    def active(self):
        """Gets the active of this KafkaConfiguration.  # noqa: E501

        Used to enable or disable Kafka output.  # noqa: E501

        :return: The active of this KafkaConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this KafkaConfiguration.

        Used to enable or disable Kafka output.  # noqa: E501

        :param active: The active of this KafkaConfiguration.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def bootstraps(self):
        """Gets the bootstraps of this KafkaConfiguration.  # noqa: E501

        A list of Kafka bootstrap server configurations to connect and push messages to. Device will connect to broker and utilize metadata to determine additional brokers within the cluster that aren't included in this list.   # noqa: E501

        :return: The bootstraps of this KafkaConfiguration.  # noqa: E501
        :rtype: list[KafkaBootstrapServerConfiguration]
        """
        return self._bootstraps

    @bootstraps.setter
    def bootstraps(self, bootstraps):
        """Sets the bootstraps of this KafkaConfiguration.

        A list of Kafka bootstrap server configurations to connect and push messages to. Device will connect to broker and utilize metadata to determine additional brokers within the cluster that aren't included in this list.   # noqa: E501

        :param bootstraps: The bootstraps of this KafkaConfiguration.  # noqa: E501
        :type: list[KafkaBootstrapServerConfiguration]
        """
        if self._configuration.client_side_validation and bootstraps is None:
            raise ValueError("Invalid value for `bootstraps`, must not be `None`")  # noqa: E501

        self._bootstraps = bootstraps

    @property
    def client_id(self):
        """Gets the client_id of this KafkaConfiguration.  # noqa: E501

        A string used to uniquely identify this device to the Kafka broker.  # noqa: E501

        :return: The client_id of this KafkaConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this KafkaConfiguration.

        A string used to uniquely identify this device to the Kafka broker.  # noqa: E501

        :param client_id: The client_id of this KafkaConfiguration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                client_id is not None and len(client_id) > 23):
            raise ValueError("Invalid value for `client_id`, length must be less than or equal to `23`")  # noqa: E501
        if (self._configuration.client_side_validation and
                client_id is not None and len(client_id) < 1):
            raise ValueError("Invalid value for `client_id`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                client_id is not None and not re.search(r'^[a-zA-Z0-9]+$', client_id)):  # noqa: E501
            raise ValueError(r"Invalid value for `client_id`, must be a follow pattern or equal to `/^[a-zA-Z0-9]+$/`")  # noqa: E501

        self._client_id = client_id

    @property
    def event_topic(self):
        """Gets the event_topic of this KafkaConfiguration.  # noqa: E501

        The base topic where the device will publish events.  # noqa: E501

        :return: The event_topic of this KafkaConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._event_topic

    @event_topic.setter
    def event_topic(self, event_topic):
        """Sets the event_topic of this KafkaConfiguration.

        The base topic where the device will publish events.  # noqa: E501

        :param event_topic: The event_topic of this KafkaConfiguration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and event_topic is None:
            raise ValueError("Invalid value for `event_topic`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_topic is not None and len(event_topic) > 200):
            raise ValueError("Invalid value for `event_topic`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_topic is not None and len(event_topic) < 1):
            raise ValueError("Invalid value for `event_topic`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_topic is not None and not re.search(r'^[a-zA-Z0-9._-]+$', event_topic)):  # noqa: E501
            raise ValueError(r"Invalid value for `event_topic`, must be a follow pattern or equal to `/^[a-zA-Z0-9._-]+$/`")  # noqa: E501

        self._event_topic = event_topic

    @property
    def partition_key(self):
        """Gets the partition_key of this KafkaConfiguration.  # noqa: E501

        A string specifying the message key, used for partitioning. If this is not specified, will randomly select partition.   # noqa: E501

        :return: The partition_key of this KafkaConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._partition_key

    @partition_key.setter
    def partition_key(self, partition_key):
        """Sets the partition_key of this KafkaConfiguration.

        A string specifying the message key, used for partitioning. If this is not specified, will randomly select partition.   # noqa: E501

        :param partition_key: The partition_key of this KafkaConfiguration.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                partition_key is not None and len(partition_key) > 200):
            raise ValueError("Invalid value for `partition_key`, length must be less than or equal to `200`")  # noqa: E501
        if (self._configuration.client_side_validation and
                partition_key is not None and len(partition_key) < 0):
            raise ValueError("Invalid value for `partition_key`, length must be greater than or equal to `0`")  # noqa: E501

        self._partition_key = partition_key

    @property
    def event_batch_limit(self):
        """Gets the event_batch_limit of this KafkaConfiguration.  # noqa: E501

        An integer specifying maximum number of events/messages batched in one message set. The eventBatchLingerMilliseconds value and the client's internal buffer size will impact actual number of messages contained within one message set.   # noqa: E501

        :return: The event_batch_limit of this KafkaConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._event_batch_limit

    @event_batch_limit.setter
    def event_batch_limit(self, event_batch_limit):
        """Sets the event_batch_limit of this KafkaConfiguration.

        An integer specifying maximum number of events/messages batched in one message set. The eventBatchLingerMilliseconds value and the client's internal buffer size will impact actual number of messages contained within one message set.   # noqa: E501

        :param event_batch_limit: The event_batch_limit of this KafkaConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                event_batch_limit is not None and event_batch_limit > 8192):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_limit`, must be a value less than or equal to `8192`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_batch_limit is not None and event_batch_limit < 1):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_limit`, must be a value greater than or equal to `1`")  # noqa: E501

        self._event_batch_limit = event_batch_limit

    @property
    def event_batch_linger_milliseconds(self):
        """Gets the event_batch_linger_milliseconds of this KafkaConfiguration.  # noqa: E501

        An integer specifying the amount of time, in milliseconds, to wait to send batch messages when eventBatchLimit has not yet been reached. A value of 0 will send each message as it is available.   # noqa: E501

        :return: The event_batch_linger_milliseconds of this KafkaConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._event_batch_linger_milliseconds

    @event_batch_linger_milliseconds.setter
    def event_batch_linger_milliseconds(self, event_batch_linger_milliseconds):
        """Sets the event_batch_linger_milliseconds of this KafkaConfiguration.

        An integer specifying the amount of time, in milliseconds, to wait to send batch messages when eventBatchLimit has not yet been reached. A value of 0 will send each message as it is available.   # noqa: E501

        :param event_batch_linger_milliseconds: The event_batch_linger_milliseconds of this KafkaConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                event_batch_linger_milliseconds is not None and event_batch_linger_milliseconds > 900000):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_linger_milliseconds`, must be a value less than or equal to `900000`")  # noqa: E501
        if (self._configuration.client_side_validation and
                event_batch_linger_milliseconds is not None and event_batch_linger_milliseconds < 0):  # noqa: E501
            raise ValueError("Invalid value for `event_batch_linger_milliseconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._event_batch_linger_milliseconds = event_batch_linger_milliseconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(KafkaConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KafkaConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KafkaConfiguration):
            return True

        return self.to_dict() != other.to_dict()
