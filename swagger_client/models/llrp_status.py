# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class LlrpStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'llrp_rfid_status': 'str',
        'llrp_connection': 'LlrpConnection'
    }

    attribute_map = {
        'llrp_rfid_status': 'llrpRfidStatus',
        'llrp_connection': 'llrpConnection'
    }

    def __init__(self, llrp_rfid_status=None, llrp_connection=None, _configuration=None):  # noqa: E501
        """LlrpStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._llrp_rfid_status = None
        self._llrp_connection = None
        self.discriminator = None

        self.llrp_rfid_status = llrp_rfid_status
        self.llrp_connection = llrp_connection

    @property
    def llrp_rfid_status(self):
        """Gets the llrp_rfid_status of this LlrpStatus.  # noqa: E501

        General LLRP RFID status.  # noqa: E501

        :return: The llrp_rfid_status of this LlrpStatus.  # noqa: E501
        :rtype: str
        """
        return self._llrp_rfid_status

    @llrp_rfid_status.setter
    def llrp_rfid_status(self, llrp_rfid_status):
        """Sets the llrp_rfid_status of this LlrpStatus.

        General LLRP RFID status.  # noqa: E501

        :param llrp_rfid_status: The llrp_rfid_status of this LlrpStatus.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and llrp_rfid_status is None:
            raise ValueError("Invalid value for `llrp_rfid_status`, must not be `None`")  # noqa: E501
        allowed_values = ["idle", "enabled", "active"]  # noqa: E501
        if (self._configuration.client_side_validation and
                llrp_rfid_status not in allowed_values):
            raise ValueError(
                "Invalid value for `llrp_rfid_status` ({0}), must be one of {1}"  # noqa: E501
                .format(llrp_rfid_status, allowed_values)
            )

        self._llrp_rfid_status = llrp_rfid_status

    @property
    def llrp_connection(self):
        """Gets the llrp_connection of this LlrpStatus.  # noqa: E501


        :return: The llrp_connection of this LlrpStatus.  # noqa: E501
        :rtype: LlrpConnection
        """
        return self._llrp_connection

    @llrp_connection.setter
    def llrp_connection(self, llrp_connection):
        """Sets the llrp_connection of this LlrpStatus.


        :param llrp_connection: The llrp_connection of this LlrpStatus.  # noqa: E501
        :type: LlrpConnection
        """
        if self._configuration.client_side_validation and llrp_connection is None:
            raise ValueError("Invalid value for `llrp_connection`, must not be `None`")  # noqa: E501

        self._llrp_connection = llrp_connection

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LlrpStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LlrpStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, LlrpStatus):
            return True

        return self.to_dict() != other.to_dict()
