# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NetworkInterface(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'interface_id': 'int',
        'interface_type': 'str',
        'interface_name': 'str',
        'status': 'str',
        'enabled': 'bool',
        'network_address': 'list[NetworkAddress]',
        'hardware_address': 'str',
        'pending': 'bool'
    }

    attribute_map = {
        'interface_id': 'interfaceId',
        'interface_type': 'interfaceType',
        'interface_name': 'interfaceName',
        'status': 'status',
        'enabled': 'enabled',
        'network_address': 'networkAddress',
        'hardware_address': 'hardwareAddress',
        'pending': 'pending'
    }

    def __init__(self, interface_id=None, interface_type=None, interface_name=None, status=None, enabled=None, network_address=None, hardware_address=None, pending=None, _configuration=None):  # noqa: E501
        """NetworkInterface - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._interface_id = None
        self._interface_type = None
        self._interface_name = None
        self._status = None
        self._enabled = None
        self._network_address = None
        self._hardware_address = None
        self._pending = None
        self.discriminator = None

        self.interface_id = interface_id
        self.interface_type = interface_type
        self.interface_name = interface_name
        self.status = status
        self.enabled = enabled
        self.network_address = network_address
        self.hardware_address = hardware_address
        if pending is not None:
            self.pending = pending

    @property
    def interface_id(self):
        """Gets the interface_id of this NetworkInterface.  # noqa: E501

        A unique identifier of the network interface assigned by the reader.  # noqa: E501

        :return: The interface_id of this NetworkInterface.  # noqa: E501
        :rtype: int
        """
        return self._interface_id

    @interface_id.setter
    def interface_id(self, interface_id):
        """Sets the interface_id of this NetworkInterface.

        A unique identifier of the network interface assigned by the reader.  # noqa: E501

        :param interface_id: The interface_id of this NetworkInterface.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and interface_id is None:
            raise ValueError("Invalid value for `interface_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                interface_id is not None and interface_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `interface_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._interface_id = interface_id

    @property
    def interface_type(self):
        """Gets the interface_type of this NetworkInterface.  # noqa: E501

        Network interface device type.  # noqa: E501

        :return: The interface_type of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._interface_type

    @interface_type.setter
    def interface_type(self, interface_type):
        """Sets the interface_type of this NetworkInterface.

        Network interface device type.  # noqa: E501

        :param interface_type: The interface_type of this NetworkInterface.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and interface_type is None:
            raise ValueError("Invalid value for `interface_type`, must not be `None`")  # noqa: E501
        allowed_values = ["eth", "wlan"]  # noqa: E501
        if (self._configuration.client_side_validation and
                interface_type not in allowed_values):
            raise ValueError(
                "Invalid value for `interface_type` ({0}), must be one of {1}"  # noqa: E501
                .format(interface_type, allowed_values)
            )

        self._interface_type = interface_type

    @property
    def interface_name(self):
        """Gets the interface_name of this NetworkInterface.  # noqa: E501

        The name of the network interface.  # noqa: E501

        :return: The interface_name of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this NetworkInterface.

        The name of the network interface.  # noqa: E501

        :param interface_name: The interface_name of this NetworkInterface.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and interface_name is None:
            raise ValueError("Invalid value for `interface_name`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                interface_name is not None and len(interface_name) > 64):
            raise ValueError("Invalid value for `interface_name`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                interface_name is not None and len(interface_name) < 1):
            raise ValueError("Invalid value for `interface_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._interface_name = interface_name

    @property
    def status(self):
        """Gets the status of this NetworkInterface.  # noqa: E501

        The state of the network interface.  # noqa: E501

        :return: The status of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NetworkInterface.

        The state of the network interface.  # noqa: E501

        :param status: The status of this NetworkInterface.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501
        allowed_values = ["connected", "disconnected"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def enabled(self):
        """Gets the enabled of this NetworkInterface.  # noqa: E501

        Indicates whether the interface is enabled or disabled.  # noqa: E501

        :return: The enabled of this NetworkInterface.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NetworkInterface.

        Indicates whether the interface is enabled or disabled.  # noqa: E501

        :param enabled: The enabled of this NetworkInterface.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def network_address(self):
        """Gets the network_address of this NetworkInterface.  # noqa: E501

        The current IPv4 and/or IPv6 network addresses on the interface.   # noqa: E501

        :return: The network_address of this NetworkInterface.  # noqa: E501
        :rtype: list[NetworkAddress]
        """
        return self._network_address

    @network_address.setter
    def network_address(self, network_address):
        """Sets the network_address of this NetworkInterface.

        The current IPv4 and/or IPv6 network addresses on the interface.   # noqa: E501

        :param network_address: The network_address of this NetworkInterface.  # noqa: E501
        :type: list[NetworkAddress]
        """
        if self._configuration.client_side_validation and network_address is None:
            raise ValueError("Invalid value for `network_address`, must not be `None`")  # noqa: E501

        self._network_address = network_address

    @property
    def hardware_address(self):
        """Gets the hardware_address of this NetworkInterface.  # noqa: E501

        The hardware or MAC address associated with the network interface.  # noqa: E501

        :return: The hardware_address of this NetworkInterface.  # noqa: E501
        :rtype: str
        """
        return self._hardware_address

    @hardware_address.setter
    def hardware_address(self, hardware_address):
        """Sets the hardware_address of this NetworkInterface.

        The hardware or MAC address associated with the network interface.  # noqa: E501

        :param hardware_address: The hardware_address of this NetworkInterface.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and hardware_address is None:
            raise ValueError("Invalid value for `hardware_address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hardware_address is not None and len(hardware_address) > 17):
            raise ValueError("Invalid value for `hardware_address`, length must be less than or equal to `17`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hardware_address is not None and len(hardware_address) < 17):
            raise ValueError("Invalid value for `hardware_address`, length must be greater than or equal to `17`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hardware_address is not None and not re.search(r'^(([0-9A-Fa-f]{2}[:]){5}[0-9A-Fa-f]{2})$', hardware_address)):  # noqa: E501
            raise ValueError(r"Invalid value for `hardware_address`, must be a follow pattern or equal to `/^(([0-9A-Fa-f]{2}[:]){5}[0-9A-Fa-f]{2})$/`")  # noqa: E501

        self._hardware_address = hardware_address

    @property
    def pending(self):
        """Gets the pending of this NetworkInterface.  # noqa: E501

        Indicates whether there is a pending configuration that requires a reboot to take effect.  # noqa: E501

        :return: The pending of this NetworkInterface.  # noqa: E501
        :rtype: bool
        """
        return self._pending

    @pending.setter
    def pending(self, pending):
        """Sets the pending of this NetworkInterface.

        Indicates whether there is a pending configuration that requires a reboot to take effect.  # noqa: E501

        :param pending: The pending of this NetworkInterface.  # noqa: E501
        :type: bool
        """

        self._pending = pending

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkInterface, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkInterface):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkInterface):
            return True

        return self.to_dict() != other.to_dict()
