# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NetworkWlanAccessPoint(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ssid': 'str',
        'hardware_address': 'str',
        'security_type': 'str',
        'mode': 'str',
        'strength': 'int',
        'frequency': 'int',
        'max_bitrate': 'int'
    }

    attribute_map = {
        'ssid': 'ssid',
        'hardware_address': 'hardwareAddress',
        'security_type': 'securityType',
        'mode': 'mode',
        'strength': 'strength',
        'frequency': 'frequency',
        'max_bitrate': 'maxBitrate'
    }

    def __init__(self, ssid=None, hardware_address=None, security_type=None, mode=None, strength=None, frequency=None, max_bitrate=None, _configuration=None):  # noqa: E501
        """NetworkWlanAccessPoint - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._ssid = None
        self._hardware_address = None
        self._security_type = None
        self._mode = None
        self._strength = None
        self._frequency = None
        self._max_bitrate = None
        self.discriminator = None

        self.ssid = ssid
        self.hardware_address = hardware_address
        self.security_type = security_type
        self.mode = mode
        self.strength = strength
        self.frequency = frequency
        self.max_bitrate = max_bitrate

    @property
    def ssid(self):
        """Gets the ssid of this NetworkWlanAccessPoint.  # noqa: E501

        A SSID (Service Set IDentifier) is the access point name.  # noqa: E501

        :return: The ssid of this NetworkWlanAccessPoint.  # noqa: E501
        :rtype: str
        """
        return self._ssid

    @ssid.setter
    def ssid(self, ssid):
        """Sets the ssid of this NetworkWlanAccessPoint.

        A SSID (Service Set IDentifier) is the access point name.  # noqa: E501

        :param ssid: The ssid of this NetworkWlanAccessPoint.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and ssid is None:
            raise ValueError("Invalid value for `ssid`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                ssid is not None and len(ssid) > 32):
            raise ValueError("Invalid value for `ssid`, length must be less than or equal to `32`")  # noqa: E501

        self._ssid = ssid

    @property
    def hardware_address(self):
        """Gets the hardware_address of this NetworkWlanAccessPoint.  # noqa: E501

        The hardware or MAC address associated with the network interface of the access point.  # noqa: E501

        :return: The hardware_address of this NetworkWlanAccessPoint.  # noqa: E501
        :rtype: str
        """
        return self._hardware_address

    @hardware_address.setter
    def hardware_address(self, hardware_address):
        """Sets the hardware_address of this NetworkWlanAccessPoint.

        The hardware or MAC address associated with the network interface of the access point.  # noqa: E501

        :param hardware_address: The hardware_address of this NetworkWlanAccessPoint.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and hardware_address is None:
            raise ValueError("Invalid value for `hardware_address`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hardware_address is not None and len(hardware_address) > 17):
            raise ValueError("Invalid value for `hardware_address`, length must be less than or equal to `17`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hardware_address is not None and len(hardware_address) < 17):
            raise ValueError("Invalid value for `hardware_address`, length must be greater than or equal to `17`")  # noqa: E501
        if (self._configuration.client_side_validation and
                hardware_address is not None and not re.search(r'^(([0-9A-Fa-f]{2}[:]){5}[0-9A-Fa-f]{2})$', hardware_address)):  # noqa: E501
            raise ValueError(r"Invalid value for `hardware_address`, must be a follow pattern or equal to `/^(([0-9A-Fa-f]{2}[:]){5}[0-9A-Fa-f]{2})$/`")  # noqa: E501

        self._hardware_address = hardware_address

    @property
    def security_type(self):
        """Gets the security_type of this NetworkWlanAccessPoint.  # noqa: E501

        The security protocol supported by the access point.  # noqa: E501

        :return: The security_type of this NetworkWlanAccessPoint.  # noqa: E501
        :rtype: str
        """
        return self._security_type

    @security_type.setter
    def security_type(self, security_type):
        """Sets the security_type of this NetworkWlanAccessPoint.

        The security protocol supported by the access point.  # noqa: E501

        :param security_type: The security_type of this NetworkWlanAccessPoint.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and security_type is None:
            raise ValueError("Invalid value for `security_type`, must not be `None`")  # noqa: E501
        allowed_values = ["None", "WEP", "WPA", "WPA2"]  # noqa: E501
        if (self._configuration.client_side_validation and
                security_type not in allowed_values):
            raise ValueError(
                "Invalid value for `security_type` ({0}), must be one of {1}"  # noqa: E501
                .format(security_type, allowed_values)
            )

        self._security_type = security_type

    @property
    def mode(self):
        """Gets the mode of this NetworkWlanAccessPoint.  # noqa: E501

        The network interface operating mode.  # noqa: E501

        :return: The mode of this NetworkWlanAccessPoint.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this NetworkWlanAccessPoint.

        The network interface operating mode.  # noqa: E501

        :param mode: The mode of this NetworkWlanAccessPoint.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501
        allowed_values = ["adhoc", "infra", "hotSpot", "mesh"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mode not in allowed_values):
            raise ValueError(
                "Invalid value for `mode` ({0}), must be one of {1}"  # noqa: E501
                .format(mode, allowed_values)
            )

        self._mode = mode

    @property
    def strength(self):
        """Gets the strength of this NetworkWlanAccessPoint.  # noqa: E501

        The access point signal strength.  # noqa: E501

        :return: The strength of this NetworkWlanAccessPoint.  # noqa: E501
        :rtype: int
        """
        return self._strength

    @strength.setter
    def strength(self, strength):
        """Sets the strength of this NetworkWlanAccessPoint.

        The access point signal strength.  # noqa: E501

        :param strength: The strength of this NetworkWlanAccessPoint.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and strength is None:
            raise ValueError("Invalid value for `strength`, must not be `None`")  # noqa: E501

        self._strength = strength

    @property
    def frequency(self):
        """Gets the frequency of this NetworkWlanAccessPoint.  # noqa: E501

        The access point operating frequency.  # noqa: E501

        :return: The frequency of this NetworkWlanAccessPoint.  # noqa: E501
        :rtype: int
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this NetworkWlanAccessPoint.

        The access point operating frequency.  # noqa: E501

        :param frequency: The frequency of this NetworkWlanAccessPoint.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and frequency is None:
            raise ValueError("Invalid value for `frequency`, must not be `None`")  # noqa: E501

        self._frequency = frequency

    @property
    def max_bitrate(self):
        """Gets the max_bitrate of this NetworkWlanAccessPoint.  # noqa: E501

        The access point, max bit rate.  # noqa: E501

        :return: The max_bitrate of this NetworkWlanAccessPoint.  # noqa: E501
        :rtype: int
        """
        return self._max_bitrate

    @max_bitrate.setter
    def max_bitrate(self, max_bitrate):
        """Sets the max_bitrate of this NetworkWlanAccessPoint.

        The access point, max bit rate.  # noqa: E501

        :param max_bitrate: The max_bitrate of this NetworkWlanAccessPoint.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and max_bitrate is None:
            raise ValueError("Invalid value for `max_bitrate`, must not be `None`")  # noqa: E501

        self._max_bitrate = max_bitrate

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NetworkWlanAccessPoint, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NetworkWlanAccessPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NetworkWlanAccessPoint):
            return True

        return self.to_dict() != other.to_dict()
