# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class NtpServerInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'server_id': 'int',
        'server': 'str',
        'server_type': 'str',
        'status': 'str',
        'poll': 'int',
        'stratum': 'int',
        'reach': 'int',
        'last_rx': 'str',
        'offset': 'str'
    }

    attribute_map = {
        'server_id': 'serverId',
        'server': 'server',
        'server_type': 'serverType',
        'status': 'status',
        'poll': 'poll',
        'stratum': 'stratum',
        'reach': 'reach',
        'last_rx': 'lastRx',
        'offset': 'offset'
    }

    def __init__(self, server_id=None, server=None, server_type=None, status=None, poll=None, stratum=None, reach=None, last_rx=None, offset=None, _configuration=None):  # noqa: E501
        """NtpServerInfo - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._server_id = None
        self._server = None
        self._server_type = None
        self._status = None
        self._poll = None
        self._stratum = None
        self._reach = None
        self._last_rx = None
        self._offset = None
        self.discriminator = None

        self.server_id = server_id
        self.server = server
        self.server_type = server_type
        if status is not None:
            self.status = status
        if poll is not None:
            self.poll = poll
        if stratum is not None:
            self.stratum = stratum
        if reach is not None:
            self.reach = reach
        if last_rx is not None:
            self.last_rx = last_rx
        if offset is not None:
            self.offset = offset

    @property
    def server_id(self):
        """Gets the server_id of this NtpServerInfo.  # noqa: E501

        The unique identifier assigned to a NTP server by the reader.  # noqa: E501

        :return: The server_id of this NtpServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this NtpServerInfo.

        The unique identifier assigned to a NTP server by the reader.  # noqa: E501

        :param server_id: The server_id of this NtpServerInfo.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and server_id is None:
            raise ValueError("Invalid value for `server_id`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                server_id is not None and server_id < 0):  # noqa: E501
            raise ValueError("Invalid value for `server_id`, must be a value greater than or equal to `0`")  # noqa: E501

        self._server_id = server_id

    @property
    def server(self):
        """Gets the server of this NtpServerInfo.  # noqa: E501

        Fully qualified domain name or IP address of the NTP server. Could be either an IPv4 address in dot-decimal format or an IPv6 address compliant with RFC-5952.   # noqa: E501

        :return: The server of this NtpServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this NtpServerInfo.

        Fully qualified domain name or IP address of the NTP server. Could be either an IPv4 address in dot-decimal format or an IPv6 address compliant with RFC-5952.   # noqa: E501

        :param server: The server of this NtpServerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and server is None:
            raise ValueError("Invalid value for `server`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                server is not None and len(server) > 253):
            raise ValueError("Invalid value for `server`, length must be less than or equal to `253`")  # noqa: E501
        if (self._configuration.client_side_validation and
                server is not None and len(server) < 1):
            raise ValueError("Invalid value for `server`, length must be greater than or equal to `1`")  # noqa: E501

        self._server = server

    @property
    def server_type(self):
        """Gets the server_type of this NtpServerInfo.  # noqa: E501

        Indicates if this is a static or dynamic NTP server. Static servers are statically added by users. Dynamic servers are those discovered automatically via DHCP servers.   # noqa: E501

        :return: The server_type of this NtpServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._server_type

    @server_type.setter
    def server_type(self, server_type):
        """Sets the server_type of this NtpServerInfo.

        Indicates if this is a static or dynamic NTP server. Static servers are statically added by users. Dynamic servers are those discovered automatically via DHCP servers.   # noqa: E501

        :param server_type: The server_type of this NtpServerInfo.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and server_type is None:
            raise ValueError("Invalid value for `server_type`, must not be `None`")  # noqa: E501
        allowed_values = ["static", "dynamic"]  # noqa: E501
        if (self._configuration.client_side_validation and
                server_type not in allowed_values):
            raise ValueError(
                "Invalid value for `server_type` ({0}), must be one of {1}"  # noqa: E501
                .format(server_type, allowed_values)
            )

        self._server_type = server_type

    @property
    def status(self):
        """Gets the status of this NtpServerInfo.  # noqa: E501


        :return: The status of this NtpServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NtpServerInfo.


        :param status: The status of this NtpServerInfo.  # noqa: E501
        :type: str
        """
        allowed_values = ["synchronized", "combined", "excluded", "disconnected", "inconsistent", "unreliable", "unknown"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def poll(self):
        """Gets the poll of this NtpServerInfo.  # noqa: E501

        Shows the rate at which the server is being polled, as a base-2 logarithm of the interval in seconds. Thus, a value of 6 would indicate that a measurement is being made every 64 seconds.   # noqa: E501

        :return: The poll of this NtpServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._poll

    @poll.setter
    def poll(self, poll):
        """Sets the poll of this NtpServerInfo.

        Shows the rate at which the server is being polled, as a base-2 logarithm of the interval in seconds. Thus, a value of 6 would indicate that a measurement is being made every 64 seconds.   # noqa: E501

        :param poll: The poll of this NtpServerInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                poll is not None and poll < 0):  # noqa: E501
            raise ValueError("Invalid value for `poll`, must be a value greater than or equal to `0`")  # noqa: E501

        self._poll = poll

    @property
    def stratum(self):
        """Gets the stratum of this NtpServerInfo.  # noqa: E501

        Shows the stratum of the server, as reported in its most recently received sample. Stratum 1 indicates a computer with a locally attached reference clock. A computer that is synchronized to a stratum 1 computer is at stratum 2. A computer that is synchronized to a stratum 2 computer is at stratum 3, and so on.   # noqa: E501

        :return: The stratum of this NtpServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._stratum

    @stratum.setter
    def stratum(self, stratum):
        """Sets the stratum of this NtpServerInfo.

        Shows the stratum of the server, as reported in its most recently received sample. Stratum 1 indicates a computer with a locally attached reference clock. A computer that is synchronized to a stratum 1 computer is at stratum 2. A computer that is synchronized to a stratum 2 computer is at stratum 3, and so on.   # noqa: E501

        :param stratum: The stratum of this NtpServerInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                stratum is not None and stratum > 16):  # noqa: E501
            raise ValueError("Invalid value for `stratum`, must be a value less than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                stratum is not None and stratum < 0):  # noqa: E501
            raise ValueError("Invalid value for `stratum`, must be a value greater than or equal to `0`")  # noqa: E501

        self._stratum = stratum

    @property
    def reach(self):
        """Gets the reach of this NtpServerInfo.  # noqa: E501

        Shows the server's reachability register printed as an octal number. The register has 8 bits and is updated on every received or missed packet from the source. A value of 377 indicates that a valid reply was received for all from the last eight transmissions.   # noqa: E501

        :return: The reach of this NtpServerInfo.  # noqa: E501
        :rtype: int
        """
        return self._reach

    @reach.setter
    def reach(self, reach):
        """Sets the reach of this NtpServerInfo.

        Shows the server's reachability register printed as an octal number. The register has 8 bits and is updated on every received or missed packet from the source. A value of 377 indicates that a valid reply was received for all from the last eight transmissions.   # noqa: E501

        :param reach: The reach of this NtpServerInfo.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                reach is not None and reach > 377):  # noqa: E501
            raise ValueError("Invalid value for `reach`, must be a value less than or equal to `377`")  # noqa: E501
        if (self._configuration.client_side_validation and
                reach is not None and reach < 0):  # noqa: E501
            raise ValueError("Invalid value for `reach`, must be a value greater than or equal to `0`")  # noqa: E501

        self._reach = reach

    @property
    def last_rx(self):
        """Gets the last_rx of this NtpServerInfo.  # noqa: E501

        Indicates how long ago the last good sample was received from this server. This is normally in seconds. The letters m, h, d or y indicate minutes, hours, days, or years.   # noqa: E501

        :return: The last_rx of this NtpServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._last_rx

    @last_rx.setter
    def last_rx(self, last_rx):
        """Sets the last_rx of this NtpServerInfo.

        Indicates how long ago the last good sample was received from this server. This is normally in seconds. The letters m, h, d or y indicate minutes, hours, days, or years.   # noqa: E501

        :param last_rx: The last_rx of this NtpServerInfo.  # noqa: E501
        :type: str
        """

        self._last_rx = last_rx

    @property
    def offset(self):
        """Gets the offset of this NtpServerInfo.  # noqa: E501

        The offset between the local clock and the server at the last measurement. The default measurement unit is in seconds, but it can be suffixed by ns (nanoseconds), us (microseconds), ms (milliseconds) for other measurement units.   # noqa: E501

        :return: The offset of this NtpServerInfo.  # noqa: E501
        :rtype: str
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this NtpServerInfo.

        The offset between the local clock and the server at the last measurement. The default measurement unit is in seconds, but it can be suffixed by ns (nanoseconds), us (microseconds), ms (milliseconds) for other measurement units.   # noqa: E501

        :param offset: The offset of this NtpServerInfo.  # noqa: E501
        :type: str
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NtpServerInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NtpServerInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, NtpServerInfo):
            return True

        return self.to_dict() != other.to_dict()
