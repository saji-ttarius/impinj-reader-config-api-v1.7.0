# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class ReaderStatus(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active_preset': 'ReaderStatusActivePreset',
        'status': 'str',
        'time': 'datetime',
        'serial_number': 'str',
        'mqtt_broker_connection_status': 'str',
        'mqtt_tls_authentication': 'str',
        'kafka_cluster_connection_status': 'str',
        'event_webhook_status': 'WebhookStatus'
    }

    attribute_map = {
        'active_preset': 'activePreset',
        'status': 'status',
        'time': 'time',
        'serial_number': 'serialNumber',
        'mqtt_broker_connection_status': 'mqttBrokerConnectionStatus',
        'mqtt_tls_authentication': 'mqttTlsAuthentication',
        'kafka_cluster_connection_status': 'kafkaClusterConnectionStatus',
        'event_webhook_status': 'eventWebhookStatus'
    }

    def __init__(self, active_preset=None, status=None, time=None, serial_number=None, mqtt_broker_connection_status=None, mqtt_tls_authentication=None, kafka_cluster_connection_status=None, event_webhook_status=None, _configuration=None):  # noqa: E501
        """ReaderStatus - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._active_preset = None
        self._status = None
        self._time = None
        self._serial_number = None
        self._mqtt_broker_connection_status = None
        self._mqtt_tls_authentication = None
        self._kafka_cluster_connection_status = None
        self._event_webhook_status = None
        self.discriminator = None

        if active_preset is not None:
            self.active_preset = active_preset
        if status is not None:
            self.status = status
        if time is not None:
            self.time = time
        if serial_number is not None:
            self.serial_number = serial_number
        if mqtt_broker_connection_status is not None:
            self.mqtt_broker_connection_status = mqtt_broker_connection_status
        if mqtt_tls_authentication is not None:
            self.mqtt_tls_authentication = mqtt_tls_authentication
        if kafka_cluster_connection_status is not None:
            self.kafka_cluster_connection_status = kafka_cluster_connection_status
        if event_webhook_status is not None:
            self.event_webhook_status = event_webhook_status

    @property
    def active_preset(self):
        """Gets the active_preset of this ReaderStatus.  # noqa: E501


        :return: The active_preset of this ReaderStatus.  # noqa: E501
        :rtype: ReaderStatusActivePreset
        """
        return self._active_preset

    @active_preset.setter
    def active_preset(self, active_preset):
        """Sets the active_preset of this ReaderStatus.


        :param active_preset: The active_preset of this ReaderStatus.  # noqa: E501
        :type: ReaderStatusActivePreset
        """

        self._active_preset = active_preset

    @property
    def status(self):
        """Gets the status of this ReaderStatus.  # noqa: E501

        Indicates whether an RFID operation is currenty running on the reader (running), is currently not running an RFID operation, but is waiting to be triggered (armed), or is not running an RFID operation and is not waiting to be triggered (idle).   # noqa: E501

        :return: The status of this ReaderStatus.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ReaderStatus.

        Indicates whether an RFID operation is currenty running on the reader (running), is currently not running an RFID operation, but is waiting to be triggered (armed), or is not running an RFID operation and is not waiting to be triggered (idle).   # noqa: E501

        :param status: The status of this ReaderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["running", "armed", "idle"]  # noqa: E501
        if (self._configuration.client_side_validation and
                status not in allowed_values):
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def time(self):
        """Gets the time of this ReaderStatus.  # noqa: E501

        The current, system time on the reader.  # noqa: E501

        :return: The time of this ReaderStatus.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ReaderStatus.

        The current, system time on the reader.  # noqa: E501

        :param time: The time of this ReaderStatus.  # noqa: E501
        :type: datetime
        """

        self._time = time

    @property
    def serial_number(self):
        """Gets the serial_number of this ReaderStatus.  # noqa: E501

        The serial number of the reader.  # noqa: E501

        :return: The serial_number of this ReaderStatus.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ReaderStatus.

        The serial number of the reader.  # noqa: E501

        :param serial_number: The serial_number of this ReaderStatus.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def mqtt_broker_connection_status(self):
        """Gets the mqtt_broker_connection_status of this ReaderStatus.  # noqa: E501

        The connection status to the MQTT broker.  # noqa: E501

        :return: The mqtt_broker_connection_status of this ReaderStatus.  # noqa: E501
        :rtype: str
        """
        return self._mqtt_broker_connection_status

    @mqtt_broker_connection_status.setter
    def mqtt_broker_connection_status(self, mqtt_broker_connection_status):
        """Sets the mqtt_broker_connection_status of this ReaderStatus.

        The connection status to the MQTT broker.  # noqa: E501

        :param mqtt_broker_connection_status: The mqtt_broker_connection_status of this ReaderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["connected", "disconnected"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mqtt_broker_connection_status not in allowed_values):
            raise ValueError(
                "Invalid value for `mqtt_broker_connection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(mqtt_broker_connection_status, allowed_values)
            )

        self._mqtt_broker_connection_status = mqtt_broker_connection_status

    @property
    def mqtt_tls_authentication(self):
        """Gets the mqtt_tls_authentication of this ReaderStatus.  # noqa: E501

        The Secure-MQTT authentication and encryption status. \\ none -- server not authenticated, no encryption \\ server -- server authenticated, TLS encryption   # noqa: E501

        :return: The mqtt_tls_authentication of this ReaderStatus.  # noqa: E501
        :rtype: str
        """
        return self._mqtt_tls_authentication

    @mqtt_tls_authentication.setter
    def mqtt_tls_authentication(self, mqtt_tls_authentication):
        """Sets the mqtt_tls_authentication of this ReaderStatus.

        The Secure-MQTT authentication and encryption status. \\ none -- server not authenticated, no encryption \\ server -- server authenticated, TLS encryption   # noqa: E501

        :param mqtt_tls_authentication: The mqtt_tls_authentication of this ReaderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["none", "server"]  # noqa: E501
        if (self._configuration.client_side_validation and
                mqtt_tls_authentication not in allowed_values):
            raise ValueError(
                "Invalid value for `mqtt_tls_authentication` ({0}), must be one of {1}"  # noqa: E501
                .format(mqtt_tls_authentication, allowed_values)
            )

        self._mqtt_tls_authentication = mqtt_tls_authentication

    @property
    def kafka_cluster_connection_status(self):
        """Gets the kafka_cluster_connection_status of this ReaderStatus.  # noqa: E501

        The connection status to the Kafka cluster. connected -- The device is connected to at least one broker in the Kafka cluster. disconnected -- The device is not connected to any brokers within the Kafka cluster.   # noqa: E501

        :return: The kafka_cluster_connection_status of this ReaderStatus.  # noqa: E501
        :rtype: str
        """
        return self._kafka_cluster_connection_status

    @kafka_cluster_connection_status.setter
    def kafka_cluster_connection_status(self, kafka_cluster_connection_status):
        """Sets the kafka_cluster_connection_status of this ReaderStatus.

        The connection status to the Kafka cluster. connected -- The device is connected to at least one broker in the Kafka cluster. disconnected -- The device is not connected to any brokers within the Kafka cluster.   # noqa: E501

        :param kafka_cluster_connection_status: The kafka_cluster_connection_status of this ReaderStatus.  # noqa: E501
        :type: str
        """
        allowed_values = ["connected", "disconnected"]  # noqa: E501
        if (self._configuration.client_side_validation and
                kafka_cluster_connection_status not in allowed_values):
            raise ValueError(
                "Invalid value for `kafka_cluster_connection_status` ({0}), must be one of {1}"  # noqa: E501
                .format(kafka_cluster_connection_status, allowed_values)
            )

        self._kafka_cluster_connection_status = kafka_cluster_connection_status

    @property
    def event_webhook_status(self):
        """Gets the event_webhook_status of this ReaderStatus.  # noqa: E501


        :return: The event_webhook_status of this ReaderStatus.  # noqa: E501
        :rtype: WebhookStatus
        """
        return self._event_webhook_status

    @event_webhook_status.setter
    def event_webhook_status(self, event_webhook_status):
        """Sets the event_webhook_status of this ReaderStatus.


        :param event_webhook_status: The event_webhook_status of this ReaderStatus.  # noqa: E501
        :type: WebhookStatus
        """

        self._event_webhook_status = event_webhook_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ReaderStatus, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReaderStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ReaderStatus):
            return True

        return self.to_dict() != other.to_dict()
