# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class SystemImage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_firmware': 'str',
        'primary_customer': 'str',
        'secondary_firmware': 'str',
        'secondary_customer': 'str',
        'scm_revision': 'str',
        'build_date': 'datetime',
        'build_plan': 'str'
    }

    attribute_map = {
        'primary_firmware': 'primaryFirmware',
        'primary_customer': 'primaryCustomer',
        'secondary_firmware': 'secondaryFirmware',
        'secondary_customer': 'secondaryCustomer',
        'scm_revision': 'scmRevision',
        'build_date': 'buildDate',
        'build_plan': 'buildPlan'
    }

    def __init__(self, primary_firmware=None, primary_customer=None, secondary_firmware=None, secondary_customer=None, scm_revision=None, build_date=None, build_plan=None, _configuration=None):  # noqa: E501
        """SystemImage - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._primary_firmware = None
        self._primary_customer = None
        self._secondary_firmware = None
        self._secondary_customer = None
        self._scm_revision = None
        self._build_date = None
        self._build_plan = None
        self.discriminator = None

        self.primary_firmware = primary_firmware
        if primary_customer is not None:
            self.primary_customer = primary_customer
        if secondary_firmware is not None:
            self.secondary_firmware = secondary_firmware
        if secondary_customer is not None:
            self.secondary_customer = secondary_customer
        if scm_revision is not None:
            self.scm_revision = scm_revision
        if build_date is not None:
            self.build_date = build_date
        if build_plan is not None:
            self.build_plan = build_plan

    @property
    def primary_firmware(self):
        """Gets the primary_firmware of this SystemImage.  # noqa: E501

        The version of the booted firmware.  # noqa: E501

        :return: The primary_firmware of this SystemImage.  # noqa: E501
        :rtype: str
        """
        return self._primary_firmware

    @primary_firmware.setter
    def primary_firmware(self, primary_firmware):
        """Sets the primary_firmware of this SystemImage.

        The version of the booted firmware.  # noqa: E501

        :param primary_firmware: The primary_firmware of this SystemImage.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and primary_firmware is None:
            raise ValueError("Invalid value for `primary_firmware`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                primary_firmware is not None and len(primary_firmware) > 15):
            raise ValueError("Invalid value for `primary_firmware`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                primary_firmware is not None and len(primary_firmware) < 7):
            raise ValueError("Invalid value for `primary_firmware`, length must be greater than or equal to `7`")  # noqa: E501
        if (self._configuration.client_side_validation and
                primary_firmware is not None and not re.search(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', primary_firmware)):  # noqa: E501
            raise ValueError(r"Invalid value for `primary_firmware`, must be a follow pattern or equal to `/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/`")  # noqa: E501

        self._primary_firmware = primary_firmware

    @property
    def primary_customer(self):
        """Gets the primary_customer of this SystemImage.  # noqa: E501

        The version of the installed and running customer application (CAP).  # noqa: E501

        :return: The primary_customer of this SystemImage.  # noqa: E501
        :rtype: str
        """
        return self._primary_customer

    @primary_customer.setter
    def primary_customer(self, primary_customer):
        """Sets the primary_customer of this SystemImage.

        The version of the installed and running customer application (CAP).  # noqa: E501

        :param primary_customer: The primary_customer of this SystemImage.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                primary_customer is not None and len(primary_customer) > 15):
            raise ValueError("Invalid value for `primary_customer`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                primary_customer is not None and len(primary_customer) < 7):
            raise ValueError("Invalid value for `primary_customer`, length must be greater than or equal to `7`")  # noqa: E501
        if (self._configuration.client_side_validation and
                primary_customer is not None and not re.search(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', primary_customer)):  # noqa: E501
            raise ValueError(r"Invalid value for `primary_customer`, must be a follow pattern or equal to `/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/`")  # noqa: E501

        self._primary_customer = primary_customer

    @property
    def secondary_firmware(self):
        """Gets the secondary_firmware of this SystemImage.  # noqa: E501

        The version of the firmware installed on the secondary partition.  # noqa: E501

        :return: The secondary_firmware of this SystemImage.  # noqa: E501
        :rtype: str
        """
        return self._secondary_firmware

    @secondary_firmware.setter
    def secondary_firmware(self, secondary_firmware):
        """Sets the secondary_firmware of this SystemImage.

        The version of the firmware installed on the secondary partition.  # noqa: E501

        :param secondary_firmware: The secondary_firmware of this SystemImage.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                secondary_firmware is not None and len(secondary_firmware) > 15):
            raise ValueError("Invalid value for `secondary_firmware`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                secondary_firmware is not None and len(secondary_firmware) < 7):
            raise ValueError("Invalid value for `secondary_firmware`, length must be greater than or equal to `7`")  # noqa: E501
        if (self._configuration.client_side_validation and
                secondary_firmware is not None and not re.search(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', secondary_firmware)):  # noqa: E501
            raise ValueError(r"Invalid value for `secondary_firmware`, must be a follow pattern or equal to `/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/`")  # noqa: E501

        self._secondary_firmware = secondary_firmware

    @property
    def secondary_customer(self):
        """Gets the secondary_customer of this SystemImage.  # noqa: E501

        The version of the customer application (CAP) installed on the secondary partition.  # noqa: E501

        :return: The secondary_customer of this SystemImage.  # noqa: E501
        :rtype: str
        """
        return self._secondary_customer

    @secondary_customer.setter
    def secondary_customer(self, secondary_customer):
        """Sets the secondary_customer of this SystemImage.

        The version of the customer application (CAP) installed on the secondary partition.  # noqa: E501

        :param secondary_customer: The secondary_customer of this SystemImage.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                secondary_customer is not None and len(secondary_customer) > 15):
            raise ValueError("Invalid value for `secondary_customer`, length must be less than or equal to `15`")  # noqa: E501
        if (self._configuration.client_side_validation and
                secondary_customer is not None and len(secondary_customer) < 7):
            raise ValueError("Invalid value for `secondary_customer`, length must be greater than or equal to `7`")  # noqa: E501
        if (self._configuration.client_side_validation and
                secondary_customer is not None and not re.search(r'^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$', secondary_customer)):  # noqa: E501
            raise ValueError(r"Invalid value for `secondary_customer`, must be a follow pattern or equal to `/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/`")  # noqa: E501

        self._secondary_customer = secondary_customer

    @property
    def scm_revision(self):
        """Gets the scm_revision of this SystemImage.  # noqa: E501

        Unique build hash of primaryFirmware.  # noqa: E501

        :return: The scm_revision of this SystemImage.  # noqa: E501
        :rtype: str
        """
        return self._scm_revision

    @scm_revision.setter
    def scm_revision(self, scm_revision):
        """Sets the scm_revision of this SystemImage.

        Unique build hash of primaryFirmware.  # noqa: E501

        :param scm_revision: The scm_revision of this SystemImage.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                scm_revision is not None and len(scm_revision) > 40):
            raise ValueError("Invalid value for `scm_revision`, length must be less than or equal to `40`")  # noqa: E501
        if (self._configuration.client_side_validation and
                scm_revision is not None and len(scm_revision) < 40):
            raise ValueError("Invalid value for `scm_revision`, length must be greater than or equal to `40`")  # noqa: E501
        if (self._configuration.client_side_validation and
                scm_revision is not None and not re.search(r'^[a-fA-F0-9]+$', scm_revision)):  # noqa: E501
            raise ValueError(r"Invalid value for `scm_revision`, must be a follow pattern or equal to `/^[a-fA-F0-9]+$/`")  # noqa: E501

        self._scm_revision = scm_revision

    @property
    def build_date(self):
        """Gets the build_date of this SystemImage.  # noqa: E501

        Timestamp of build for primaryFirmware.  # noqa: E501

        :return: The build_date of this SystemImage.  # noqa: E501
        :rtype: datetime
        """
        return self._build_date

    @build_date.setter
    def build_date(self, build_date):
        """Sets the build_date of this SystemImage.

        Timestamp of build for primaryFirmware.  # noqa: E501

        :param build_date: The build_date of this SystemImage.  # noqa: E501
        :type: datetime
        """

        self._build_date = build_date

    @property
    def build_plan(self):
        """Gets the build_plan of this SystemImage.  # noqa: E501

        Traceable build identifier for primaryFirmware.  # noqa: E501

        :return: The build_plan of this SystemImage.  # noqa: E501
        :rtype: str
        """
        return self._build_plan

    @build_plan.setter
    def build_plan(self, build_plan):
        """Sets the build_plan of this SystemImage.

        Traceable build identifier for primaryFirmware.  # noqa: E501

        :param build_plan: The build_plan of this SystemImage.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                build_plan is not None and len(build_plan) > 128):
            raise ValueError("Invalid value for `build_plan`, length must be less than or equal to `128`")  # noqa: E501

        self._build_plan = build_plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SystemImage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SystemImage):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SystemImage):
            return True

        return self.to_dict() != other.to_dict()
