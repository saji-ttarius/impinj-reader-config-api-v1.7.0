# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TagAuthentication(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_hex': 'str'
    }

    attribute_map = {
        'message_hex': 'messageHex'
    }

    def __init__(self, message_hex=None, _configuration=None):  # noqa: E501
        """TagAuthentication - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message_hex = None
        self.discriminator = None

        self.message_hex = message_hex

    @property
    def message_hex(self):
        """Gets the message_hex of this TagAuthentication.  # noqa: E501

        The challenge message to send to the authentication engine. If empty then a random challenge message will be auto generated by the reader that will request the tag append the TID. If not empty the message must be 48 bits (12 hex digits) that begins with a 6 bit header and is followed by a 42 bit challenge. The format of the 6 bit header is two bits of auth method which must be 00, 3 bits reserved for future use which must be 000, and 1 bit that when set to 1 requests the tag append the TID to the authentication response.   # noqa: E501

        :return: The message_hex of this TagAuthentication.  # noqa: E501
        :rtype: str
        """
        return self._message_hex

    @message_hex.setter
    def message_hex(self, message_hex):
        """Sets the message_hex of this TagAuthentication.

        The challenge message to send to the authentication engine. If empty then a random challenge message will be auto generated by the reader that will request the tag append the TID. If not empty the message must be 48 bits (12 hex digits) that begins with a 6 bit header and is followed by a 42 bit challenge. The format of the 6 bit header is two bits of auth method which must be 00, 3 bits reserved for future use which must be 000, and 1 bit that when set to 1 requests the tag append the TID to the authentication response.   # noqa: E501

        :param message_hex: The message_hex of this TagAuthentication.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and message_hex is None:
            raise ValueError("Invalid value for `message_hex`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message_hex is not None and len(message_hex) > 12):
            raise ValueError("Invalid value for `message_hex`, length must be less than or equal to `12`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message_hex is not None and len(message_hex) < 0):
            raise ValueError("Invalid value for `message_hex`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message_hex is not None and not re.search(r'^(|0[0-7][0-9A-Fa-f]{10})$', message_hex)):  # noqa: E501
            raise ValueError(r"Invalid value for `message_hex`, must be a follow pattern or equal to `/^(|0[0-7][0-9A-Fa-f]{10})$/`")  # noqa: E501

        self._message_hex = message_hex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagAuthentication, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagAuthentication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagAuthentication):
            return True

        return self.to_dict() != other.to_dict()
