# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TagAuthenticationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message_hex': 'str',
        'response_hex': 'str',
        'tid_hex': 'str'
    }

    attribute_map = {
        'message_hex': 'messageHex',
        'response_hex': 'responseHex',
        'tid_hex': 'tidHex'
    }

    def __init__(self, message_hex=None, response_hex=None, tid_hex=None, _configuration=None):  # noqa: E501
        """TagAuthenticationResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._message_hex = None
        self._response_hex = None
        self._tid_hex = None
        self.discriminator = None

        if message_hex is not None:
            self.message_hex = message_hex
        self.response_hex = response_hex
        if tid_hex is not None:
            self.tid_hex = tid_hex

    @property
    def message_hex(self):
        """Gets the message_hex of this TagAuthenticationResponse.  # noqa: E501

        The challenge message that was sent to the tag.  # noqa: E501

        :return: The message_hex of this TagAuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._message_hex

    @message_hex.setter
    def message_hex(self, message_hex):
        """Sets the message_hex of this TagAuthenticationResponse.

        The challenge message that was sent to the tag.  # noqa: E501

        :param message_hex: The message_hex of this TagAuthenticationResponse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                message_hex is not None and len(message_hex) > 12):
            raise ValueError("Invalid value for `message_hex`, length must be less than or equal to `12`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message_hex is not None and len(message_hex) < 12):
            raise ValueError("Invalid value for `message_hex`, length must be greater than or equal to `12`")  # noqa: E501
        if (self._configuration.client_side_validation and
                message_hex is not None and not re.search(r'^[0-9A-F]+$', message_hex)):  # noqa: E501
            raise ValueError(r"Invalid value for `message_hex`, must be a follow pattern or equal to `/^[0-9A-F]+$/`")  # noqa: E501

        self._message_hex = message_hex

    @property
    def response_hex(self):
        """Gets the response_hex of this TagAuthenticationResponse.  # noqa: E501

        The authentication response that was received from the tag. If a value other than success was received from the tag, responseHex will contain an empty string.   # noqa: E501

        :return: The response_hex of this TagAuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._response_hex

    @response_hex.setter
    def response_hex(self, response_hex):
        """Sets the response_hex of this TagAuthenticationResponse.

        The authentication response that was received from the tag. If a value other than success was received from the tag, responseHex will contain an empty string.   # noqa: E501

        :param response_hex: The response_hex of this TagAuthenticationResponse.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and response_hex is None:
            raise ValueError("Invalid value for `response_hex`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                response_hex is not None and len(response_hex) > 16):
            raise ValueError("Invalid value for `response_hex`, length must be less than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                response_hex is not None and len(response_hex) < 0):
            raise ValueError("Invalid value for `response_hex`, length must be greater than or equal to `0`")  # noqa: E501
        if (self._configuration.client_side_validation and
                response_hex is not None and not re.search(r'^[0-9A-F]*$', response_hex)):  # noqa: E501
            raise ValueError(r"Invalid value for `response_hex`, must be a follow pattern or equal to `/^[0-9A-F]*$/`")  # noqa: E501

        self._response_hex = response_hex

    @property
    def tid_hex(self):
        """Gets the tid_hex of this TagAuthenticationResponse.  # noqa: E501

        Present if 64 bits of TID information, which excludes TID words 0 and 2, was returned with the authentication response received from the tag.   # noqa: E501

        :return: The tid_hex of this TagAuthenticationResponse.  # noqa: E501
        :rtype: str
        """
        return self._tid_hex

    @tid_hex.setter
    def tid_hex(self, tid_hex):
        """Sets the tid_hex of this TagAuthenticationResponse.

        Present if 64 bits of TID information, which excludes TID words 0 and 2, was returned with the authentication response received from the tag.   # noqa: E501

        :param tid_hex: The tid_hex of this TagAuthenticationResponse.  # noqa: E501
        :type: str
        """
        if (self._configuration.client_side_validation and
                tid_hex is not None and len(tid_hex) > 16):
            raise ValueError("Invalid value for `tid_hex`, length must be less than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tid_hex is not None and len(tid_hex) < 16):
            raise ValueError("Invalid value for `tid_hex`, length must be greater than or equal to `16`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tid_hex is not None and not re.search(r'^[0-9A-F]+$', tid_hex)):  # noqa: E501
            raise ValueError(r"Invalid value for `tid_hex`, must be a follow pattern or equal to `/^[0-9A-F]+$/`")  # noqa: E501

        self._tid_hex = tid_hex

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagAuthenticationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagAuthenticationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagAuthenticationResponse):
            return True

        return self.to_dict() != other.to_dict()
