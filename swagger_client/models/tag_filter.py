# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TagFilter(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'str',
        'tag_memory_bank': 'str',
        'bit_offset': 'int',
        'mask': 'str',
        'mask_length': 'int'
    }

    attribute_map = {
        'action': 'action',
        'tag_memory_bank': 'tagMemoryBank',
        'bit_offset': 'bitOffset',
        'mask': 'mask',
        'mask_length': 'maskLength'
    }

    def __init__(self, action=None, tag_memory_bank=None, bit_offset=None, mask=None, mask_length=None, _configuration=None):  # noqa: E501
        """TagFilter - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._action = None
        self._tag_memory_bank = None
        self._bit_offset = None
        self._mask = None
        self._mask_length = None
        self.discriminator = None

        self.action = action
        self.tag_memory_bank = tag_memory_bank
        self.bit_offset = bit_offset
        self.mask = mask
        if mask_length is not None:
            self.mask_length = mask_length

    @property
    def action(self):
        """Gets the action of this TagFilter.  # noqa: E501

        Specifies if tags matching the provided criteria should be included or excluded from the set.  # noqa: E501

        :return: The action of this TagFilter.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this TagFilter.

        Specifies if tags matching the provided criteria should be included or excluded from the set.  # noqa: E501

        :param action: The action of this TagFilter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")  # noqa: E501
        allowed_values = ["include", "exclude"]  # noqa: E501
        if (self._configuration.client_side_validation and
                action not in allowed_values):
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def tag_memory_bank(self):
        """Gets the tag_memory_bank of this TagFilter.  # noqa: E501

        Specifies which memory bank on the tag is of interest.  # noqa: E501

        :return: The tag_memory_bank of this TagFilter.  # noqa: E501
        :rtype: str
        """
        return self._tag_memory_bank

    @tag_memory_bank.setter
    def tag_memory_bank(self, tag_memory_bank):
        """Sets the tag_memory_bank of this TagFilter.

        Specifies which memory bank on the tag is of interest.  # noqa: E501

        :param tag_memory_bank: The tag_memory_bank of this TagFilter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and tag_memory_bank is None:
            raise ValueError("Invalid value for `tag_memory_bank`, must not be `None`")  # noqa: E501
        allowed_values = ["epc", "tid", "user"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_memory_bank not in allowed_values):
            raise ValueError(
                "Invalid value for `tag_memory_bank` ({0}), must be one of {1}"  # noqa: E501
                .format(tag_memory_bank, allowed_values)
            )

        self._tag_memory_bank = tag_memory_bank

    @property
    def bit_offset(self):
        """Gets the bit_offset of this TagFilter.  # noqa: E501

        The index into the memory bank where the mask should be applied, in bits.  # noqa: E501

        :return: The bit_offset of this TagFilter.  # noqa: E501
        :rtype: int
        """
        return self._bit_offset

    @bit_offset.setter
    def bit_offset(self, bit_offset):
        """Sets the bit_offset of this TagFilter.

        The index into the memory bank where the mask should be applied, in bits.  # noqa: E501

        :param bit_offset: The bit_offset of this TagFilter.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and bit_offset is None:
            raise ValueError("Invalid value for `bit_offset`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bit_offset is not None and bit_offset > 8192):  # noqa: E501
            raise ValueError("Invalid value for `bit_offset`, must be a value less than or equal to `8192`")  # noqa: E501
        if (self._configuration.client_side_validation and
                bit_offset is not None and bit_offset < 0):  # noqa: E501
            raise ValueError("Invalid value for `bit_offset`, must be a value greater than or equal to `0`")  # noqa: E501

        self._bit_offset = bit_offset

    @property
    def mask(self):
        """Gets the mask of this TagFilter.  # noqa: E501

        The pattern to match against, specified as a hexadecimal string.  # noqa: E501

        :return: The mask of this TagFilter.  # noqa: E501
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this TagFilter.

        The pattern to match against, specified as a hexadecimal string.  # noqa: E501

        :param mask: The mask of this TagFilter.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and mask is None:
            raise ValueError("Invalid value for `mask`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mask is not None and len(mask) > 64):
            raise ValueError("Invalid value for `mask`, length must be less than or equal to `64`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mask is not None and len(mask) < 1):
            raise ValueError("Invalid value for `mask`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mask is not None and not re.search(r'^[0-9A-Fa-f]+$', mask)):  # noqa: E501
            raise ValueError(r"Invalid value for `mask`, must be a follow pattern or equal to `/^[0-9A-Fa-f]+$/`")  # noqa: E501

        self._mask = mask

    @property
    def mask_length(self):
        """Gets the mask_length of this TagFilter.  # noqa: E501

        When the desired mask's length is not divisible by four, specify how much of the provided mask should be used, in bits. This means the mask is left-justified.   # noqa: E501

        :return: The mask_length of this TagFilter.  # noqa: E501
        :rtype: int
        """
        return self._mask_length

    @mask_length.setter
    def mask_length(self, mask_length):
        """Sets the mask_length of this TagFilter.

        When the desired mask's length is not divisible by four, specify how much of the provided mask should be used, in bits. This means the mask is left-justified.   # noqa: E501

        :param mask_length: The mask_length of this TagFilter.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                mask_length is not None and mask_length > 255):  # noqa: E501
            raise ValueError("Invalid value for `mask_length`, must be a value less than or equal to `255`")  # noqa: E501
        if (self._configuration.client_side_validation and
                mask_length is not None and mask_length < 1):  # noqa: E501
            raise ValueError("Invalid value for `mask_length`, must be a value greater than or equal to `1`")  # noqa: E501

        self._mask_length = mask_length

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagFilter, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagFilter):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagFilter):
            return True

        return self.to_dict() != other.to_dict()
