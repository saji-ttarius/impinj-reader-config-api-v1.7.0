# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TagInventoryEventConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tag_reporting': 'TagReportingConfiguration',
        'epc': 'str',
        'epc_hex': 'str',
        'tid': 'str',
        'tid_hex': 'str',
        'xpc_hex': 'str',
        'antenna_port': 'str',
        'transmit_power_cdbm': 'str',
        'peak_rssi_cdbm': 'str',
        'frequency': 'str',
        'pc': 'str',
        'last_seen_time': 'str',
        'phase_angle': 'str'
    }

    attribute_map = {
        'tag_reporting': 'tagReporting',
        'epc': 'epc',
        'epc_hex': 'epcHex',
        'tid': 'tid',
        'tid_hex': 'tidHex',
        'xpc_hex': 'xpcHex',
        'antenna_port': 'antennaPort',
        'transmit_power_cdbm': 'transmitPowerCdbm',
        'peak_rssi_cdbm': 'peakRssiCdbm',
        'frequency': 'frequency',
        'pc': 'pc',
        'last_seen_time': 'lastSeenTime',
        'phase_angle': 'phaseAngle'
    }

    def __init__(self, tag_reporting=None, epc='enabled', epc_hex='disabled', tid='enabled', tid_hex='disabled', xpc_hex='disabled', antenna_port='enabled', transmit_power_cdbm='enabled', peak_rssi_cdbm='enabled', frequency='enabled', pc='disabled', last_seen_time='disabled', phase_angle='disabled', _configuration=None):  # noqa: E501
        """TagInventoryEventConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._tag_reporting = None
        self._epc = None
        self._epc_hex = None
        self._tid = None
        self._tid_hex = None
        self._xpc_hex = None
        self._antenna_port = None
        self._transmit_power_cdbm = None
        self._peak_rssi_cdbm = None
        self._frequency = None
        self._pc = None
        self._last_seen_time = None
        self._phase_angle = None
        self.discriminator = None

        if tag_reporting is not None:
            self.tag_reporting = tag_reporting
        if epc is not None:
            self.epc = epc
        if epc_hex is not None:
            self.epc_hex = epc_hex
        if tid is not None:
            self.tid = tid
        if tid_hex is not None:
            self.tid_hex = tid_hex
        if xpc_hex is not None:
            self.xpc_hex = xpc_hex
        if antenna_port is not None:
            self.antenna_port = antenna_port
        if transmit_power_cdbm is not None:
            self.transmit_power_cdbm = transmit_power_cdbm
        if peak_rssi_cdbm is not None:
            self.peak_rssi_cdbm = peak_rssi_cdbm
        if frequency is not None:
            self.frequency = frequency
        if pc is not None:
            self.pc = pc
        if last_seen_time is not None:
            self.last_seen_time = last_seen_time
        if phase_angle is not None:
            self.phase_angle = phase_angle

    @property
    def tag_reporting(self):
        """Gets the tag_reporting of this TagInventoryEventConfiguration.  # noqa: E501


        :return: The tag_reporting of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: TagReportingConfiguration
        """
        return self._tag_reporting

    @tag_reporting.setter
    def tag_reporting(self, tag_reporting):
        """Sets the tag_reporting of this TagInventoryEventConfiguration.


        :param tag_reporting: The tag_reporting of this TagInventoryEventConfiguration.  # noqa: E501
        :type: TagReportingConfiguration
        """

        self._tag_reporting = tag_reporting

    @property
    def epc(self):
        """Gets the epc of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the epc property.  # noqa: E501

        :return: The epc of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._epc

    @epc.setter
    def epc(self, epc):
        """Sets the epc of this TagInventoryEventConfiguration.

        Enable or disable reporting of the epc property.  # noqa: E501

        :param epc: The epc of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                epc not in allowed_values):
            raise ValueError(
                "Invalid value for `epc` ({0}), must be one of {1}"  # noqa: E501
                .format(epc, allowed_values)
            )

        self._epc = epc

    @property
    def epc_hex(self):
        """Gets the epc_hex of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the epcHex property.  # noqa: E501

        :return: The epc_hex of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._epc_hex

    @epc_hex.setter
    def epc_hex(self, epc_hex):
        """Sets the epc_hex of this TagInventoryEventConfiguration.

        Enable or disable reporting of the epcHex property.  # noqa: E501

        :param epc_hex: The epc_hex of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                epc_hex not in allowed_values):
            raise ValueError(
                "Invalid value for `epc_hex` ({0}), must be one of {1}"  # noqa: E501
                .format(epc_hex, allowed_values)
            )

        self._epc_hex = epc_hex

    @property
    def tid(self):
        """Gets the tid of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the tid property, fastId must be enabled in an InventoryAntennaConfiguration for tid information to be available for reporting.   # noqa: E501

        :return: The tid of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tid

    @tid.setter
    def tid(self, tid):
        """Sets the tid of this TagInventoryEventConfiguration.

        Enable or disable reporting of the tid property, fastId must be enabled in an InventoryAntennaConfiguration for tid information to be available for reporting.   # noqa: E501

        :param tid: The tid of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tid not in allowed_values):
            raise ValueError(
                "Invalid value for `tid` ({0}), must be one of {1}"  # noqa: E501
                .format(tid, allowed_values)
            )

        self._tid = tid

    @property
    def tid_hex(self):
        """Gets the tid_hex of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the tidHex property, fastId must be enabled in an InventoryAntennaConfiguration for tid information to be available for reporting.   # noqa: E501

        :return: The tid_hex of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tid_hex

    @tid_hex.setter
    def tid_hex(self, tid_hex):
        """Sets the tid_hex of this TagInventoryEventConfiguration.

        Enable or disable reporting of the tidHex property, fastId must be enabled in an InventoryAntennaConfiguration for tid information to be available for reporting.   # noqa: E501

        :param tid_hex: The tid_hex of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tid_hex not in allowed_values):
            raise ValueError(
                "Invalid value for `tid_hex` ({0}), must be one of {1}"  # noqa: E501
                .format(tid_hex, allowed_values)
            )

        self._tid_hex = tid_hex

    @property
    def xpc_hex(self):
        """Gets the xpc_hex of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting Extended Protocol Control words.  # noqa: E501

        :return: The xpc_hex of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._xpc_hex

    @xpc_hex.setter
    def xpc_hex(self, xpc_hex):
        """Sets the xpc_hex of this TagInventoryEventConfiguration.

        Enable or disable reporting Extended Protocol Control words.  # noqa: E501

        :param xpc_hex: The xpc_hex of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                xpc_hex not in allowed_values):
            raise ValueError(
                "Invalid value for `xpc_hex` ({0}), must be one of {1}"  # noqa: E501
                .format(xpc_hex, allowed_values)
            )

        self._xpc_hex = xpc_hex

    @property
    def antenna_port(self):
        """Gets the antenna_port of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the antennaPort.  # noqa: E501

        :return: The antenna_port of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._antenna_port

    @antenna_port.setter
    def antenna_port(self, antenna_port):
        """Sets the antenna_port of this TagInventoryEventConfiguration.

        Enable or disable reporting of the antennaPort.  # noqa: E501

        :param antenna_port: The antenna_port of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                antenna_port not in allowed_values):
            raise ValueError(
                "Invalid value for `antenna_port` ({0}), must be one of {1}"  # noqa: E501
                .format(antenna_port, allowed_values)
            )

        self._antenna_port = antenna_port

    @property
    def transmit_power_cdbm(self):
        """Gets the transmit_power_cdbm of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the transmit power.  # noqa: E501

        :return: The transmit_power_cdbm of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._transmit_power_cdbm

    @transmit_power_cdbm.setter
    def transmit_power_cdbm(self, transmit_power_cdbm):
        """Sets the transmit_power_cdbm of this TagInventoryEventConfiguration.

        Enable or disable reporting of the transmit power.  # noqa: E501

        :param transmit_power_cdbm: The transmit_power_cdbm of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                transmit_power_cdbm not in allowed_values):
            raise ValueError(
                "Invalid value for `transmit_power_cdbm` ({0}), must be one of {1}"  # noqa: E501
                .format(transmit_power_cdbm, allowed_values)
            )

        self._transmit_power_cdbm = transmit_power_cdbm

    @property
    def peak_rssi_cdbm(self):
        """Gets the peak_rssi_cdbm of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the peak rssi.  # noqa: E501

        :return: The peak_rssi_cdbm of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._peak_rssi_cdbm

    @peak_rssi_cdbm.setter
    def peak_rssi_cdbm(self, peak_rssi_cdbm):
        """Sets the peak_rssi_cdbm of this TagInventoryEventConfiguration.

        Enable or disable reporting of the peak rssi.  # noqa: E501

        :param peak_rssi_cdbm: The peak_rssi_cdbm of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                peak_rssi_cdbm not in allowed_values):
            raise ValueError(
                "Invalid value for `peak_rssi_cdbm` ({0}), must be one of {1}"  # noqa: E501
                .format(peak_rssi_cdbm, allowed_values)
            )

        self._peak_rssi_cdbm = peak_rssi_cdbm

    @property
    def frequency(self):
        """Gets the frequency of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the frequency.  # noqa: E501

        :return: The frequency of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this TagInventoryEventConfiguration.

        Enable or disable reporting of the frequency.  # noqa: E501

        :param frequency: The frequency of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                frequency not in allowed_values):
            raise ValueError(
                "Invalid value for `frequency` ({0}), must be one of {1}"  # noqa: E501
                .format(frequency, allowed_values)
            )

        self._frequency = frequency

    @property
    def pc(self):
        """Gets the pc of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the PC word.  # noqa: E501

        :return: The pc of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._pc

    @pc.setter
    def pc(self, pc):
        """Sets the pc of this TagInventoryEventConfiguration.

        Enable or disable reporting of the PC word.  # noqa: E501

        :param pc: The pc of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                pc not in allowed_values):
            raise ValueError(
                "Invalid value for `pc` ({0}), must be one of {1}"  # noqa: E501
                .format(pc, allowed_values)
            )

        self._pc = pc

    @property
    def last_seen_time(self):
        """Gets the last_seen_time of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of lastSeenTime  # noqa: E501

        :return: The last_seen_time of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._last_seen_time

    @last_seen_time.setter
    def last_seen_time(self, last_seen_time):
        """Sets the last_seen_time of this TagInventoryEventConfiguration.

        Enable or disable reporting of lastSeenTime  # noqa: E501

        :param last_seen_time: The last_seen_time of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                last_seen_time not in allowed_values):
            raise ValueError(
                "Invalid value for `last_seen_time` ({0}), must be one of {1}"  # noqa: E501
                .format(last_seen_time, allowed_values)
            )

        self._last_seen_time = last_seen_time

    @property
    def phase_angle(self):
        """Gets the phase_angle of this TagInventoryEventConfiguration.  # noqa: E501

        Enable or disable reporting of the phase angle.  # noqa: E501

        :return: The phase_angle of this TagInventoryEventConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._phase_angle

    @phase_angle.setter
    def phase_angle(self, phase_angle):
        """Sets the phase_angle of this TagInventoryEventConfiguration.

        Enable or disable reporting of the phase angle.  # noqa: E501

        :param phase_angle: The phase_angle of this TagInventoryEventConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["disabled", "enabled"]  # noqa: E501
        if (self._configuration.client_side_validation and
                phase_angle not in allowed_values):
            raise ValueError(
                "Invalid value for `phase_angle` ({0}), must be one of {1}"  # noqa: E501
                .format(phase_angle, allowed_values)
            )

        self._phase_angle = phase_angle

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagInventoryEventConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagInventoryEventConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagInventoryEventConfiguration):
            return True

        return self.to_dict() != other.to_dict()
