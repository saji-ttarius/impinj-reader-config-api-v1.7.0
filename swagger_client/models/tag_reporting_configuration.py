# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TagReportingConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'reporting_interval_seconds': 'int',
        'tag_cache_size': 'int',
        'antenna_identifier': 'str',
        'tag_identifier': 'str'
    }

    attribute_map = {
        'reporting_interval_seconds': 'reportingIntervalSeconds',
        'tag_cache_size': 'tagCacheSize',
        'antenna_identifier': 'antennaIdentifier',
        'tag_identifier': 'tagIdentifier'
    }

    def __init__(self, reporting_interval_seconds=None, tag_cache_size=None, antenna_identifier='antennaPort', tag_identifier='epc', _configuration=None):  # noqa: E501
        """TagReportingConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._reporting_interval_seconds = None
        self._tag_cache_size = None
        self._antenna_identifier = None
        self._tag_identifier = None
        self.discriminator = None

        if reporting_interval_seconds is not None:
            self.reporting_interval_seconds = reporting_interval_seconds
        if tag_cache_size is not None:
            self.tag_cache_size = tag_cache_size
        if antenna_identifier is not None:
            self.antenna_identifier = antenna_identifier
        if tag_identifier is not None:
            self.tag_identifier = tag_identifier

    @property
    def reporting_interval_seconds(self):
        """Gets the reporting_interval_seconds of this TagReportingConfiguration.  # noqa: E501

        The reporting interval is the duration after which a tag persisting in the field of view is reported again. Set to zero to disable the feature.   # noqa: E501

        :return: The reporting_interval_seconds of this TagReportingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._reporting_interval_seconds

    @reporting_interval_seconds.setter
    def reporting_interval_seconds(self, reporting_interval_seconds):
        """Sets the reporting_interval_seconds of this TagReportingConfiguration.

        The reporting interval is the duration after which a tag persisting in the field of view is reported again. Set to zero to disable the feature.   # noqa: E501

        :param reporting_interval_seconds: The reporting_interval_seconds of this TagReportingConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                reporting_interval_seconds is not None and reporting_interval_seconds > 600):  # noqa: E501
            raise ValueError("Invalid value for `reporting_interval_seconds`, must be a value less than or equal to `600`")  # noqa: E501
        if (self._configuration.client_side_validation and
                reporting_interval_seconds is not None and reporting_interval_seconds < 0):  # noqa: E501
            raise ValueError("Invalid value for `reporting_interval_seconds`, must be a value greater than or equal to `0`")  # noqa: E501

        self._reporting_interval_seconds = reporting_interval_seconds

    @property
    def tag_cache_size(self):
        """Gets the tag_cache_size of this TagReportingConfiguration.  # noqa: E501

        The maximum number of unique tags expected in the field of view during the reporting interval.   # noqa: E501

        :return: The tag_cache_size of this TagReportingConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._tag_cache_size

    @tag_cache_size.setter
    def tag_cache_size(self, tag_cache_size):
        """Sets the tag_cache_size of this TagReportingConfiguration.

        The maximum number of unique tags expected in the field of view during the reporting interval.   # noqa: E501

        :param tag_cache_size: The tag_cache_size of this TagReportingConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                tag_cache_size is not None and tag_cache_size > 8192):  # noqa: E501
            raise ValueError("Invalid value for `tag_cache_size`, must be a value less than or equal to `8192`")  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_cache_size is not None and tag_cache_size < 1024):  # noqa: E501
            raise ValueError("Invalid value for `tag_cache_size`, must be a value greater than or equal to `1024`")  # noqa: E501

        self._tag_cache_size = tag_cache_size

    @property
    def antenna_identifier(self):
        """Gets the antenna_identifier of this TagReportingConfiguration.  # noqa: E501

        TagInventoryEvent field to use to identify antenna.  # noqa: E501

        :return: The antenna_identifier of this TagReportingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._antenna_identifier

    @antenna_identifier.setter
    def antenna_identifier(self, antenna_identifier):
        """Sets the antenna_identifier of this TagReportingConfiguration.

        TagInventoryEvent field to use to identify antenna.  # noqa: E501

        :param antenna_identifier: The antenna_identifier of this TagReportingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["antennaPort", "antennaName"]  # noqa: E501
        if (self._configuration.client_side_validation and
                antenna_identifier not in allowed_values):
            raise ValueError(
                "Invalid value for `antenna_identifier` ({0}), must be one of {1}"  # noqa: E501
                .format(antenna_identifier, allowed_values)
            )

        self._antenna_identifier = antenna_identifier

    @property
    def tag_identifier(self):
        """Gets the tag_identifier of this TagReportingConfiguration.  # noqa: E501

        TagInventoryEvent field to use to identify unique tag.  # noqa: E501

        :return: The tag_identifier of this TagReportingConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._tag_identifier

    @tag_identifier.setter
    def tag_identifier(self, tag_identifier):
        """Sets the tag_identifier of this TagReportingConfiguration.

        TagInventoryEvent field to use to identify unique tag.  # noqa: E501

        :param tag_identifier: The tag_identifier of this TagReportingConfiguration.  # noqa: E501
        :type: str
        """
        allowed_values = ["epc", "tid"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tag_identifier not in allowed_values):
            raise ValueError(
                "Invalid value for `tag_identifier` ({0}), must be one of {1}"  # noqa: E501
                .format(tag_identifier, allowed_values)
            )

        self._tag_identifier = tag_identifier

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TagReportingConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TagReportingConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TagReportingConfiguration):
            return True

        return self.to_dict() != other.to_dict()
