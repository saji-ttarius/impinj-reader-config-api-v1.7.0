# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class TransmitPowerSweepConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'minimum_power_cdbm': 'int',
        'step_size_cdb': 'int'
    }

    attribute_map = {
        'minimum_power_cdbm': 'minimumPowerCdbm',
        'step_size_cdb': 'stepSizeCdb'
    }

    def __init__(self, minimum_power_cdbm=None, step_size_cdb=None, _configuration=None):  # noqa: E501
        """TransmitPowerSweepConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._minimum_power_cdbm = None
        self._step_size_cdb = None
        self.discriminator = None

        self.minimum_power_cdbm = minimum_power_cdbm
        self.step_size_cdb = step_size_cdb

    @property
    def minimum_power_cdbm(self):
        """Gets the minimum_power_cdbm of this TransmitPowerSweepConfiguration.  # noqa: E501

        The minimum power at which the first inventory round  will be performed. If the difference between this value and the antenna's transmit power is not a multiple of the step size, this value will be rounded up.  This value must be less than or equal to the antenna's transmit power minus the provided step size.   # noqa: E501

        :return: The minimum_power_cdbm of this TransmitPowerSweepConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._minimum_power_cdbm

    @minimum_power_cdbm.setter
    def minimum_power_cdbm(self, minimum_power_cdbm):
        """Sets the minimum_power_cdbm of this TransmitPowerSweepConfiguration.

        The minimum power at which the first inventory round  will be performed. If the difference between this value and the antenna's transmit power is not a multiple of the step size, this value will be rounded up.  This value must be less than or equal to the antenna's transmit power minus the provided step size.   # noqa: E501

        :param minimum_power_cdbm: The minimum_power_cdbm of this TransmitPowerSweepConfiguration.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and minimum_power_cdbm is None:
            raise ValueError("Invalid value for `minimum_power_cdbm`, must not be `None`")  # noqa: E501

        self._minimum_power_cdbm = minimum_power_cdbm

    @property
    def step_size_cdb(self):
        """Gets the step_size_cdb of this TransmitPowerSweepConfiguration.  # noqa: E501

        The amount of extra power each successive inventory round should use. If the reader cannot precisely provide this step size, it will round to the nearest possible step size.   # noqa: E501

        :return: The step_size_cdb of this TransmitPowerSweepConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._step_size_cdb

    @step_size_cdb.setter
    def step_size_cdb(self, step_size_cdb):
        """Sets the step_size_cdb of this TransmitPowerSweepConfiguration.

        The amount of extra power each successive inventory round should use. If the reader cannot precisely provide this step size, it will round to the nearest possible step size.   # noqa: E501

        :param step_size_cdb: The step_size_cdb of this TransmitPowerSweepConfiguration.  # noqa: E501
        :type: int
        """
        if self._configuration.client_side_validation and step_size_cdb is None:
            raise ValueError("Invalid value for `step_size_cdb`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                step_size_cdb is not None and step_size_cdb > 600):  # noqa: E501
            raise ValueError("Invalid value for `step_size_cdb`, must be a value less than or equal to `600`")  # noqa: E501
        if (self._configuration.client_side_validation and
                step_size_cdb is not None and step_size_cdb < 25):  # noqa: E501
            raise ValueError("Invalid value for `step_size_cdb`, must be a value greater than or equal to `25`")  # noqa: E501

        self._step_size_cdb = step_size_cdb

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransmitPowerSweepConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransmitPowerSweepConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TransmitPowerSweepConfiguration):
            return True

        return self.to_dict() != other.to_dict()
