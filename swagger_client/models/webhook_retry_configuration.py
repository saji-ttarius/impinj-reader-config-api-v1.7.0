# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WebhookRetryConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'retry_initial_seconds': 'int',
        'retry_max_seconds': 'int'
    }

    attribute_map = {
        'enabled': 'enabled',
        'retry_initial_seconds': 'retryInitialSeconds',
        'retry_max_seconds': 'retryMaxSeconds'
    }

    def __init__(self, enabled=True, retry_initial_seconds=None, retry_max_seconds=None, _configuration=None):  # noqa: E501
        """WebhookRetryConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._enabled = None
        self._retry_initial_seconds = None
        self._retry_max_seconds = None
        self.discriminator = None

        if enabled is not None:
            self.enabled = enabled
        if retry_initial_seconds is not None:
            self.retry_initial_seconds = retry_initial_seconds
        if retry_max_seconds is not None:
            self.retry_max_seconds = retry_max_seconds

    @property
    def enabled(self):
        """Gets the enabled of this WebhookRetryConfiguration.  # noqa: E501


        :return: The enabled of this WebhookRetryConfiguration.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this WebhookRetryConfiguration.


        :param enabled: The enabled of this WebhookRetryConfiguration.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def retry_initial_seconds(self):
        """Gets the retry_initial_seconds of this WebhookRetryConfiguration.  # noqa: E501

        The initial time to wait before retrying the webhook.   # noqa: E501

        :return: The retry_initial_seconds of this WebhookRetryConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._retry_initial_seconds

    @retry_initial_seconds.setter
    def retry_initial_seconds(self, retry_initial_seconds):
        """Sets the retry_initial_seconds of this WebhookRetryConfiguration.

        The initial time to wait before retrying the webhook.   # noqa: E501

        :param retry_initial_seconds: The retry_initial_seconds of this WebhookRetryConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                retry_initial_seconds is not None and retry_initial_seconds > 300):  # noqa: E501
            raise ValueError("Invalid value for `retry_initial_seconds`, must be a value less than or equal to `300`")  # noqa: E501
        if (self._configuration.client_side_validation and
                retry_initial_seconds is not None and retry_initial_seconds < 1):  # noqa: E501
            raise ValueError("Invalid value for `retry_initial_seconds`, must be a value greater than or equal to `1`")  # noqa: E501

        self._retry_initial_seconds = retry_initial_seconds

    @property
    def retry_max_seconds(self):
        """Gets the retry_max_seconds of this WebhookRetryConfiguration.  # noqa: E501

        The retry period will be increased exponentially until this value is reached.   # noqa: E501

        :return: The retry_max_seconds of this WebhookRetryConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._retry_max_seconds

    @retry_max_seconds.setter
    def retry_max_seconds(self, retry_max_seconds):
        """Sets the retry_max_seconds of this WebhookRetryConfiguration.

        The retry period will be increased exponentially until this value is reached.   # noqa: E501

        :param retry_max_seconds: The retry_max_seconds of this WebhookRetryConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                retry_max_seconds is not None and retry_max_seconds > 300):  # noqa: E501
            raise ValueError("Invalid value for `retry_max_seconds`, must be a value less than or equal to `300`")  # noqa: E501
        if (self._configuration.client_side_validation and
                retry_max_seconds is not None and retry_max_seconds < 1):  # noqa: E501
            raise ValueError("Invalid value for `retry_max_seconds`, must be a value greater than or equal to `1`")  # noqa: E501

        self._retry_max_seconds = retry_max_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookRetryConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookRetryConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookRetryConfiguration):
            return True

        return self.to_dict() != other.to_dict()
