# coding: utf-8

"""
    Impinj Reader Configuration REST API

    This API provides an interface for configuring RFID operations and reporting streams on Impinj Readers as well as updating Impinj Reader firmware and configuring system settings.  When retrieved from a reader, this OpenAPI Document is dynamically updated based on the capabilities of the reader. See the '/openapi.json' path.   # noqa: E501

    OpenAPI spec version: 1.7.0
    Contact: developer-feedback@impinj.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class WebhookServerConfiguration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'port': 'int',
        'authentication': 'WebhookHttpAuthentication',
        'tls': 'WebhookTlsConfiguration'
    }

    attribute_map = {
        'url': 'url',
        'port': 'port',
        'authentication': 'authentication',
        'tls': 'tls'
    }

    def __init__(self, url=None, port=None, authentication=None, tls=None, _configuration=None):  # noqa: E501
        """WebhookServerConfiguration - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._url = None
        self._port = None
        self._authentication = None
        self._tls = None
        self.discriminator = None

        self.url = url
        if port is not None:
            self.port = port
        if authentication is not None:
            self.authentication = authentication
        if tls is not None:
            self.tls = tls

    @property
    def url(self):
        """Gets the url of this WebhookServerConfiguration.  # noqa: E501

        The URL to which the webhook will be posted. Supported protocols are \"http\" or \"https\". For \"https\", TLSv1.2 and greater are supported.   # noqa: E501

        :return: The url of this WebhookServerConfiguration.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhookServerConfiguration.

        The URL to which the webhook will be posted. Supported protocols are \"http\" or \"https\". For \"https\", TLSv1.2 and greater are supported.   # noqa: E501

        :param url: The url of this WebhookServerConfiguration.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501
        if (self._configuration.client_side_validation and
                url is not None and len(url) > 2048):
            raise ValueError("Invalid value for `url`, length must be less than or equal to `2048`")  # noqa: E501
        if (self._configuration.client_side_validation and
                url is not None and len(url) < 1):
            raise ValueError("Invalid value for `url`, length must be greater than or equal to `1`")  # noqa: E501
        if (self._configuration.client_side_validation and
                url is not None and not re.search(r'^https?:\/\/.', url)):  # noqa: E501
            raise ValueError(r"Invalid value for `url`, must be a follow pattern or equal to `/^https?:\/\/./`")  # noqa: E501

        self._url = url

    @property
    def port(self):
        """Gets the port of this WebhookServerConfiguration.  # noqa: E501

        The remote port number to connect to instead of the protocol default.   # noqa: E501

        :return: The port of this WebhookServerConfiguration.  # noqa: E501
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """Sets the port of this WebhookServerConfiguration.

        The remote port number to connect to instead of the protocol default.   # noqa: E501

        :param port: The port of this WebhookServerConfiguration.  # noqa: E501
        :type: int
        """
        if (self._configuration.client_side_validation and
                port is not None and port > 65535):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value less than or equal to `65535`")  # noqa: E501
        if (self._configuration.client_side_validation and
                port is not None and port < 1):  # noqa: E501
            raise ValueError("Invalid value for `port`, must be a value greater than or equal to `1`")  # noqa: E501

        self._port = port

    @property
    def authentication(self):
        """Gets the authentication of this WebhookServerConfiguration.  # noqa: E501


        :return: The authentication of this WebhookServerConfiguration.  # noqa: E501
        :rtype: WebhookHttpAuthentication
        """
        return self._authentication

    @authentication.setter
    def authentication(self, authentication):
        """Sets the authentication of this WebhookServerConfiguration.


        :param authentication: The authentication of this WebhookServerConfiguration.  # noqa: E501
        :type: WebhookHttpAuthentication
        """

        self._authentication = authentication

    @property
    def tls(self):
        """Gets the tls of this WebhookServerConfiguration.  # noqa: E501


        :return: The tls of this WebhookServerConfiguration.  # noqa: E501
        :rtype: WebhookTlsConfiguration
        """
        return self._tls

    @tls.setter
    def tls(self, tls):
        """Sets the tls of this WebhookServerConfiguration.


        :param tls: The tls of this WebhookServerConfiguration.  # noqa: E501
        :type: WebhookTlsConfiguration
        """

        self._tls = tls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WebhookServerConfiguration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhookServerConfiguration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, WebhookServerConfiguration):
            return True

        return self.to_dict() != other.to_dict()
